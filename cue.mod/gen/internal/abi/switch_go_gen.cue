// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go internal/abi

package abi

#InterfaceSwitch: {
	Cache?: null | #InterfaceSwitchCache @go(,*InterfaceSwitchCache)
	NCases: int

	// Array of NCases elements.
	// Each case must be a non-empty interface type.
	Cases: 1 * [null | #InterfaceType] @go(,[1]*InterfaceType)
}

#InterfaceSwitchCache: {
	Mask: uint64 @go(,uintptr)
	Entries: 1 * [#InterfaceSwitchCacheEntry] @go(,[1]InterfaceSwitchCacheEntry)
}

#InterfaceSwitchCacheEntry: {
	// type of source value (a *Type)
	Typ: uint64 @go(,uintptr)

	// case # to dispatch to
	Case: int

	// itab to use for resulting case variable (a *runtime.itab)
	Itab: uint64 @go(,uintptr)
}

_#go122InterfaceSwitchCache: true

#TypeAssert: {
	Cache?:  null | #TypeAssertCache @go(,*TypeAssertCache)
	Inter?:  null | #InterfaceType   @go(,*InterfaceType)
	CanFail: bool
}

#TypeAssertCache: {
	Mask: uint64 @go(,uintptr)
	Entries: 1 * [#TypeAssertCacheEntry] @go(,[1]TypeAssertCacheEntry)
}

#TypeAssertCacheEntry: {
	// type of source value (a *runtime._type)
	Typ: uint64 @go(,uintptr)

	// itab to use for result (a *runtime.itab)
	// nil if CanFail is set and conversion would fail.
	Itab: uint64 @go(,uintptr)
}
