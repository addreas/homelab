// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/client-go/tools/clientcmd/api

package api

import "k8s.io/apimachinery/pkg/runtime"

// Config holds the information needed to build connect to remote kubernetes clusters as a given user
// IMPORTANT if you add fields to this struct, please update IsConfigEmpty()
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#Config: {
	// Legacy field from pkg/api/types.go TypeMeta.
	// TODO(jlowdermilk): remove this after eliminating downstream dependencies.
	// +k8s:conversion-gen=false
	// +optional
	kind?: string @go(Kind)

	// Legacy field from pkg/api/types.go TypeMeta.
	// TODO(jlowdermilk): remove this after eliminating downstream dependencies.
	// +k8s:conversion-gen=false
	// +optional
	apiVersion?: string @go(APIVersion)

	// Preferences holds general information to be use for cli interactions
	preferences: #Preferences @go(Preferences)

	// Clusters is a map of referencable names to cluster configs
	clusters: {[string]: null | #Cluster} @go(Clusters,map[string]*Cluster)

	// AuthInfos is a map of referencable names to user configs
	users: {[string]: null | #AuthInfo} @go(AuthInfos,map[string]*AuthInfo)

	// Contexts is a map of referencable names to context configs
	contexts: {[string]: null | #Context} @go(Contexts,map[string]*Context)

	// CurrentContext is the name of the context that you would like to use by default
	"current-context": string @go(CurrentContext)

	// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
	// +optional
	extensions?: {[string]: runtime.#Object} @go(Extensions,map[string]runtime.Object)
}

// IMPORTANT if you add fields to this struct, please update IsConfigEmpty()
#Preferences: {
	// +optional
	colors?: bool @go(Colors)

	// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
	// +optional
	extensions?: {[string]: runtime.#Object} @go(Extensions,map[string]runtime.Object)
}

// Cluster contains information about how to communicate with a kubernetes cluster
#Cluster: {
	// LocationOfOrigin indicates where this object came from.  It is used for round tripping config post-merge, but never serialized.
	// +k8s:conversion-gen=false
	LocationOfOrigin: string

	// Server is the address of the kubernetes cluster (https://hostname:port).
	server: string @go(Server)

	// TLSServerName is used to check server certificate. If TLSServerName is empty, the hostname used to contact the server is used.
	// +optional
	"tls-server-name"?: string @go(TLSServerName)

	// InsecureSkipTLSVerify skips the validity check for the server's certificate. This will make your HTTPS connections insecure.
	// +optional
	"insecure-skip-tls-verify"?: bool @go(InsecureSkipTLSVerify)

	// CertificateAuthority is the path to a cert file for the certificate authority.
	// +optional
	"certificate-authority"?: string @go(CertificateAuthority)

	// CertificateAuthorityData contains PEM-encoded certificate authority certificates. Overrides CertificateAuthority
	// +optional
	"certificate-authority-data"?: bytes @go(CertificateAuthorityData,[]byte)

	// ProxyURL is the URL to the proxy to be used for all requests made by this
	// client. URLs with "http", "https", and "socks5" schemes are supported.  If
	// this configuration is not provided or the empty string, the client
	// attempts to construct a proxy configuration from http_proxy and
	// https_proxy environment variables. If these environment variables are not
	// set, the client does not attempt to proxy requests.
	//
	// socks5 proxying does not currently support spdy streaming endpoints (exec,
	// attach, port forward).
	// +optional
	"proxy-url"?: string @go(ProxyURL)

	// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
	// +optional
	extensions?: {[string]: runtime.#Object} @go(Extensions,map[string]runtime.Object)
}

// AuthInfo contains information that describes identity information.  This is use to tell the kubernetes cluster who you are.
#AuthInfo: {
	// LocationOfOrigin indicates where this object came from.  It is used for round tripping config post-merge, but never serialized.
	// +k8s:conversion-gen=false
	LocationOfOrigin: string

	// ClientCertificate is the path to a client cert file for TLS.
	// +optional
	"client-certificate"?: string @go(ClientCertificate)

	// ClientCertificateData contains PEM-encoded data from a client cert file for TLS. Overrides ClientCertificate
	// +optional
	"client-certificate-data"?: bytes @go(ClientCertificateData,[]byte)

	// ClientKey is the path to a client key file for TLS.
	// +optional
	"client-key"?: string @go(ClientKey)

	// ClientKeyData contains PEM-encoded data from a client key file for TLS. Overrides ClientKey
	// +optional
	"client-key-data"?: bytes @go(ClientKeyData,[]byte)

	// Token is the bearer token for authentication to the kubernetes cluster.
	// +optional
	token?: string @go(Token)

	// TokenFile is a pointer to a file that contains a bearer token (as described above).  If both Token and TokenFile are present, Token takes precedence.
	// +optional
	tokenFile?: string @go(TokenFile)

	// Impersonate is the username to act-as.
	// +optional
	"act-as"?: string @go(Impersonate)

	// ImpersonateUID is the uid to impersonate.
	// +optional
	"act-as-uid"?: string @go(ImpersonateUID)

	// ImpersonateGroups is the groups to impersonate.
	// +optional
	"act-as-groups"?: [...string] @go(ImpersonateGroups,[]string)

	// ImpersonateUserExtra contains additional information for impersonated user.
	// +optional
	"act-as-user-extra"?: {[string]: [...string]} @go(ImpersonateUserExtra,map[string][]string)

	// Username is the username for basic authentication to the kubernetes cluster.
	// +optional
	username?: string @go(Username)

	// Password is the password for basic authentication to the kubernetes cluster.
	// +optional
	password?: string @go(Password)

	// AuthProvider specifies a custom authentication plugin for the kubernetes cluster.
	// +optional
	"auth-provider"?: null | #AuthProviderConfig @go(AuthProvider,*AuthProviderConfig)

	// Exec specifies a custom exec-based authentication plugin for the kubernetes cluster.
	// +optional
	exec?: null | #ExecConfig @go(Exec,*ExecConfig)

	// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
	// +optional
	extensions?: {[string]: runtime.#Object} @go(Extensions,map[string]runtime.Object)
}

// Context is a tuple of references to a cluster (how do I communicate with a kubernetes cluster), a user (how do I identify myself), and a namespace (what subset of resources do I want to work with)
#Context: {
	// LocationOfOrigin indicates where this object came from.  It is used for round tripping config post-merge, but never serialized.
	// +k8s:conversion-gen=false
	LocationOfOrigin: string

	// Cluster is the name of the cluster for this context
	cluster: string @go(Cluster)

	// AuthInfo is the name of the authInfo for this context
	user: string @go(AuthInfo)

	// Namespace is the default namespace to use on unspecified requests
	// +optional
	namespace?: string @go(Namespace)

	// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
	// +optional
	extensions?: {[string]: runtime.#Object} @go(Extensions,map[string]runtime.Object)
}

// AuthProviderConfig holds the configuration for a specified auth provider.
#AuthProviderConfig: {
	name: string @go(Name)

	// +optional
	config?: {[string]: string} @go(Config,map[string]string)
}

// ExecConfig specifies a command to provide client credentials. The command is exec'd
// and outputs structured stdout holding credentials.
//
// See the client.authentication.k8s.io API group for specifications of the exact input
// and output format
#ExecConfig: {
	// Command to execute.
	command: string @go(Command)

	// Arguments to pass to the command when executing it.
	// +optional
	args: [...string] @go(Args,[]string)

	// Env defines additional environment variables to expose to the process. These
	// are unioned with the host's environment, as well as variables client-go uses
	// to pass argument to the plugin.
	// +optional
	env: [...#ExecEnvVar] @go(Env,[]ExecEnvVar)

	// Preferred input version of the ExecInfo. The returned ExecCredentials MUST use
	// the same encoding version as the input.
	apiVersion?: string @go(APIVersion)

	// This text is shown to the user when the executable doesn't seem to be
	// present. For example, `brew install foo-cli` might be a good InstallHint for
	// foo-cli on Mac OS systems.
	installHint?: string @go(InstallHint)

	// ProvideClusterInfo determines whether or not to provide cluster information,
	// which could potentially contain very large CA data, to this exec plugin as a
	// part of the KUBERNETES_EXEC_INFO environment variable. By default, it is set
	// to false. Package k8s.io/client-go/tools/auth/exec provides helper methods for
	// reading this environment variable.
	provideClusterInfo: bool @go(ProvideClusterInfo)

	// Config holds additional config data that is specific to the exec
	// plugin with regards to the cluster being authenticated to.
	//
	// This data is sourced from the clientcmd Cluster object's extensions[exec] field:
	//
	// clusters:
	// - name: my-cluster
	//   cluster:
	//     ...
	//     extensions:
	//     - name: client.authentication.k8s.io/exec  # reserved extension name for per cluster exec config
	//       extension:
	//         audience: 06e3fbd18de8  # arbitrary config
	//
	// In some environments, the user config may be exactly the same across many clusters
	// (i.e. call this exec plugin) minus some details that are specific to each cluster
	// such as the audience.  This field allows the per cluster config to be directly
	// specified with the cluster info.  Using this field to store secret data is not
	// recommended as one of the prime benefits of exec plugins is that no secrets need
	// to be stored directly in the kubeconfig.
	// +k8s:conversion-gen=false
	Config: runtime.#Object

	// InteractiveMode determines this plugin's relationship with standard input. Valid
	// values are "Never" (this exec plugin never uses standard input), "IfAvailable" (this
	// exec plugin wants to use standard input if it is available), or "Always" (this exec
	// plugin requires standard input to function). See ExecInteractiveMode values for more
	// details.
	//
	// If APIVersion is client.authentication.k8s.io/v1alpha1 or
	// client.authentication.k8s.io/v1beta1, then this field is optional and defaults
	// to "IfAvailable" when unset. Otherwise, this field is required.
	// +optional
	InteractiveMode: #ExecInteractiveMode

	// StdinUnavailable indicates whether the exec authenticator can pass standard
	// input through to this exec plugin. For example, a higher level entity might be using
	// standard input for something else and therefore it would not be safe for the exec
	// plugin to use standard input. This is kept here in order to keep all of the exec configuration
	// together, but it is never serialized.
	// +k8s:conversion-gen=false
	StdinUnavailable: bool

	// StdinUnavailableMessage is an optional message to be displayed when the exec authenticator
	// cannot successfully run this exec plugin because it needs to use standard input and
	// StdinUnavailable is true. For example, a process that is already using standard input to
	// read user instructions might set this to "used by my-program to read user instructions".
	// +k8s:conversion-gen=false
	StdinUnavailableMessage: string
}

// ExecEnvVar is used for setting environment variables when executing an exec-based
// credential plugin.
#ExecEnvVar: {
	name:  string @go(Name)
	value: string @go(Value)
}

// ExecInteractiveMode is a string that describes an exec plugin's relationship with standard input.
#ExecInteractiveMode: string // #enumExecInteractiveMode

#enumExecInteractiveMode:
	#NeverExecInteractiveMode |
	#IfAvailableExecInteractiveMode |
	#AlwaysExecInteractiveMode

// NeverExecInteractiveMode declares that this exec plugin never needs to use standard
// input, and therefore the exec plugin will be run regardless of whether standard input is
// available for user input.
#NeverExecInteractiveMode: #ExecInteractiveMode & "Never"

// IfAvailableExecInteractiveMode declares that this exec plugin would like to use standard input
// if it is available, but can still operate if standard input is not available. Therefore, the
// exec plugin will be run regardless of whether stdin is available for user input. If standard
// input is available for user input, then it will be provided to this exec plugin.
#IfAvailableExecInteractiveMode: #ExecInteractiveMode & "IfAvailable"

// AlwaysExecInteractiveMode declares that this exec plugin requires standard input in order to
// run, and therefore the exec plugin will only be run if standard input is available for user
// input. If standard input is not available for user input, then the exec plugin will not be run
// and an error will be returned by the exec plugin runner.
#AlwaysExecInteractiveMode: #ExecInteractiveMode & "Always"
