// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go crypto/tls

package tls

import (
	"net"
	"io"
)

// cbcMode is an interface for block ciphers using cipher block chaining.
_#cbcMode: _

// RecordHeaderError is returned when a TLS record header is invalid.
#RecordHeaderError: {
	// Msg contains a human readable string that describes the error.
	Msg: string

	// RecordHeader contains the five bytes of TLS record header that
	// triggered the error.
	RecordHeader: bytes @go(,[5]byte)

	// Conn provides the underlying net.Conn in the case that a client
	// sent an initial handshake that didn't look like TLS.
	// It is nil if there's already been a handshake or a TLS alert has
	// been written to the connection.
	Conn: net.#Conn
}

// atLeastReader reads from R, stopping with EOF once at least N bytes have been
// read. It is different from an io.LimitedReader in that it doesn't cut short
// the last Read call, and in that it considers an early EOF an error.
_#atLeastReader: {
	R: io.#Reader
	N: int64
}

// tcpMSSEstimate is a conservative estimate of the TCP maximum segment
// size (MSS). A constant is used, rather than querying the kernel for
// the actual MSS, to avoid complexity. The value here is the IPv6
// minimum MTU (1280 bytes) minus the overhead of an IPv6 header (40
// bytes) and a TCP header with timestamps (32 bytes).
_#tcpMSSEstimate: 1208

// recordSizeBoostThreshold is the number of bytes of application data
// sent after which the TLS record size will be increased to the
// maximum.
_#recordSizeBoostThreshold: 131072
