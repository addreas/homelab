// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go crypto/tls

package tls

// CipherSuite is a TLS cipher suite. Note that most functions in this package
// accept and expose cipher suite IDs instead of this type.
#CipherSuite: {
	ID:   uint16
	Name: string

	// Supported versions is the list of TLS protocol versions that can
	// negotiate this cipher suite.
	SupportedVersions: [...uint16] @go(,[]uint16)

	// Insecure is true if the cipher suite has known security issues
	// due to its primitives, design, or implementation.
	Insecure: bool
}

// suiteECDHE indicates that the cipher suite involves elliptic curve
// Diffie-Hellman. This means that it should only be selected when the
// client indicates that it supports ECC with a curve and point format
// that we're happy with.
_#suiteECDHE: 1

// suiteECSign indicates that the cipher suite involves an ECDSA or
// EdDSA signature and therefore may only be selected when the server's
// certificate is ECDSA or EdDSA. If this is not set then the cipher suite
// is RSA based.
_#suiteECSign: 2

// suiteTLS12 indicates that the cipher suite should only be advertised
// and accepted when using TLS 1.2.
_#suiteTLS12: 4

// suiteSHA384 indicates that the cipher suite uses SHA384 as the
// handshake hash.
_#suiteSHA384: 8

_#aead: _

_#aeadNonceLength:   12
_#noncePrefixLength: 4

_#constantTimeHash: _

// TLS 1.0 - 1.2 cipher suites.
#TLS_RSA_WITH_RC4_128_SHA:                      uint16 & 0x0005
#TLS_RSA_WITH_3DES_EDE_CBC_SHA:                 uint16 & 0x000a
#TLS_RSA_WITH_AES_128_CBC_SHA:                  uint16 & 0x002f
#TLS_RSA_WITH_AES_256_CBC_SHA:                  uint16 & 0x0035
#TLS_RSA_WITH_AES_128_CBC_SHA256:               uint16 & 0x003c
#TLS_RSA_WITH_AES_128_GCM_SHA256:               uint16 & 0x009c
#TLS_RSA_WITH_AES_256_GCM_SHA384:               uint16 & 0x009d
#TLS_ECDHE_ECDSA_WITH_RC4_128_SHA:              uint16 & 0xc007
#TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:          uint16 & 0xc009
#TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:          uint16 & 0xc00a
#TLS_ECDHE_RSA_WITH_RC4_128_SHA:                uint16 & 0xc011
#TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:           uint16 & 0xc012
#TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:            uint16 & 0xc013
#TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:            uint16 & 0xc014
#TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:       uint16 & 0xc023
#TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:         uint16 & 0xc027
#TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:         uint16 & 0xc02f
#TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:       uint16 & 0xc02b
#TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:         uint16 & 0xc030
#TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:       uint16 & 0xc02c
#TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:   uint16 & 0xcca8
#TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: uint16 & 0xcca9

// TLS 1.3 cipher suites.
#TLS_AES_128_GCM_SHA256:       uint16 & 0x1301
#TLS_AES_256_GCM_SHA384:       uint16 & 0x1302
#TLS_CHACHA20_POLY1305_SHA256: uint16 & 0x1303

// TLS_FALLBACK_SCSV isn't a standard cipher suite but an indicator
// that the client is doing version fallback. See RFC 7507.
#TLS_FALLBACK_SCSV: uint16 & 0x5600

// Legacy names for the corresponding cipher suites with the correct _SHA256
// suffix, retained for backward compatibility.
#TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305:   uint16 & 52392
#TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305: uint16 & 52393
