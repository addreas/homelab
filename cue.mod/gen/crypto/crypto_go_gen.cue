// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go crypto

// Package crypto collects common cryptographic constants.
package crypto

// Hash identifies a cryptographic hash function that is implemented in another
// package.
#Hash: uint // #enumHash

#enumHash:
	#MD4 |
	#MD5 |
	#SHA1 |
	#SHA224 |
	#SHA256 |
	#SHA384 |
	#SHA512 |
	#MD5SHA1 |
	#RIPEMD160 |
	#SHA3_224 |
	#SHA3_256 |
	#SHA3_384 |
	#SHA3_512 |
	#SHA512_224 |
	#SHA512_256 |
	#BLAKE2s_256 |
	#BLAKE2b_256 |
	#BLAKE2b_384 |
	#BLAKE2b_512 |
	_#maxHash

#values_Hash: {
	MD4:         #MD4
	MD5:         #MD5
	SHA1:        #SHA1
	SHA224:      #SHA224
	SHA256:      #SHA256
	SHA384:      #SHA384
	SHA512:      #SHA512
	MD5SHA1:     #MD5SHA1
	RIPEMD160:   #RIPEMD160
	SHA3_224:    #SHA3_224
	SHA3_256:    #SHA3_256
	SHA3_384:    #SHA3_384
	SHA3_512:    #SHA3_512
	SHA512_224:  #SHA512_224
	SHA512_256:  #SHA512_256
	BLAKE2s_256: #BLAKE2s_256
	BLAKE2b_256: #BLAKE2b_256
	BLAKE2b_384: #BLAKE2b_384
	BLAKE2b_512: #BLAKE2b_512
	maxHash:     _#maxHash
}

#MD4:         #Hash & 1
#MD5:         #Hash & 2
#SHA1:        #Hash & 3
#SHA224:      #Hash & 4
#SHA256:      #Hash & 5
#SHA384:      #Hash & 6
#SHA512:      #Hash & 7
#MD5SHA1:     #Hash & 8
#RIPEMD160:   #Hash & 9
#SHA3_224:    #Hash & 10
#SHA3_256:    #Hash & 11
#SHA3_384:    #Hash & 12
#SHA3_512:    #Hash & 13
#SHA512_224:  #Hash & 14
#SHA512_256:  #Hash & 15
#BLAKE2s_256: #Hash & 16
#BLAKE2b_256: #Hash & 17
#BLAKE2b_384: #Hash & 18
#BLAKE2b_512: #Hash & 19
_#maxHash:    #Hash & 20

// PublicKey represents a public key using an unspecified algorithm.
//
// Although this type is an empty interface for backwards compatibility reasons,
// all public key types in the standard library implement the following interface
//
// interface{
//     Equal(x crypto.PublicKey) bool
// }
//
// which can be used for increased type safety within applications.
#PublicKey: _

// PrivateKey represents a private key using an unspecified algorithm.
//
// Although this type is an empty interface for backwards compatibility reasons,
// all private key types in the standard library implement the following interface
//
// interface{
//     Public() crypto.PublicKey
//     Equal(x crypto.PrivateKey) bool
// }
//
// as well as purpose-specific interfaces such as Signer and Decrypter, which
// can be used for increased type safety within applications.
#PrivateKey: _

// Signer is an interface for an opaque private key that can be used for
// signing operations. For example, an RSA key kept in a hardware module.
#Signer: _

// SignerOpts contains options for signing with a Signer.
#SignerOpts: _

// Decrypter is an interface for an opaque private key that can be used for
// asymmetric decryption operations. An example would be an RSA key
// kept in a hardware module.
#Decrypter: _

#DecrypterOpts: _
