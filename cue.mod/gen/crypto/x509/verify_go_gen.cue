// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go crypto/x509

package x509

import "time"

#InvalidReason: int // #enumInvalidReason

#enumInvalidReason:
	#NotAuthorizedToSign |
	#Expired |
	#CANotAuthorizedForThisName |
	#TooManyIntermediates |
	#IncompatibleUsage |
	#NameMismatch |
	#NameConstraintsWithoutSANs |
	#UnconstrainedName |
	#TooManyConstraints |
	#CANotAuthorizedForExtKeyUsage

#values_InvalidReason: {
	NotAuthorizedToSign:           #NotAuthorizedToSign
	Expired:                       #Expired
	CANotAuthorizedForThisName:    #CANotAuthorizedForThisName
	TooManyIntermediates:          #TooManyIntermediates
	IncompatibleUsage:             #IncompatibleUsage
	NameMismatch:                  #NameMismatch
	NameConstraintsWithoutSANs:    #NameConstraintsWithoutSANs
	UnconstrainedName:             #UnconstrainedName
	TooManyConstraints:            #TooManyConstraints
	CANotAuthorizedForExtKeyUsage: #CANotAuthorizedForExtKeyUsage
}

// NotAuthorizedToSign results when a certificate is signed by another
// which isn't marked as a CA certificate.
#NotAuthorizedToSign: #InvalidReason & 0

// Expired results when a certificate has expired, based on the time
// given in the VerifyOptions.
#Expired: #InvalidReason & 1

// CANotAuthorizedForThisName results when an intermediate or root
// certificate has a name constraint which doesn't permit a DNS or
// other name (including IP address) in the leaf certificate.
#CANotAuthorizedForThisName: #InvalidReason & 2

// TooManyIntermediates results when a path length constraint is
// violated.
#TooManyIntermediates: #InvalidReason & 3

// IncompatibleUsage results when the certificate's key usage indicates
// that it may only be used for a different purpose.
#IncompatibleUsage: #InvalidReason & 4

// NameMismatch results when the subject name of a parent certificate
// does not match the issuer name in the child.
#NameMismatch: #InvalidReason & 5

// NameConstraintsWithoutSANs is a legacy error and is no longer returned.
#NameConstraintsWithoutSANs: #InvalidReason & 6

// UnconstrainedName results when a CA certificate contains permitted
// name constraints, but leaf certificate contains a name of an
// unsupported or unconstrained type.
#UnconstrainedName: #InvalidReason & 7

// TooManyConstraints results when the number of comparison operations
// needed to check a certificate exceeds the limit set by
// VerifyOptions.MaxConstraintComparisions. This limit exists to
// prevent pathological certificates can consuming excessive amounts of
// CPU time to verify.
#TooManyConstraints: #InvalidReason & 8

// CANotAuthorizedForExtKeyUsage results when an intermediate or root
// certificate does not permit a requested extended key usage.
#CANotAuthorizedForExtKeyUsage: #InvalidReason & 9

// CertificateInvalidError results when an odd error occurs. Users of this
// library probably want to handle all these errors uniformly.
#CertificateInvalidError: {
	Cert?:  null | #Certificate @go(,*Certificate)
	Reason: #InvalidReason
	Detail: string
}

// HostnameError results when the set of authorized names doesn't match the
// requested name.
#HostnameError: {
	Certificate?: null | #Certificate @go(,*Certificate)
	Host:         string
}

// UnknownAuthorityError results when the certificate issuer is unknown
#UnknownAuthorityError: {
	Cert?: null | #Certificate @go(,*Certificate)
}

// SystemRootsError results when we fail to load the system root certificates.
#SystemRootsError: {
	Err: _ @go(,error)
}

// VerifyOptions contains parameters for Certificate.Verify.
#VerifyOptions: {
	// DNSName, if set, is checked against the leaf certificate with
	// Certificate.VerifyHostname or the platform verifier.
	DNSName: string

	// CurrentTime is used to check the validity of all certificates in the
	// chain. If zero, the current time is used.
	CurrentTime: time.Time

	// KeyUsages specifies which Extended Key Usage values are acceptable. A
	// chain is accepted if it allows any of the listed values. An empty list
	// means ExtKeyUsageServerAuth. To accept any key usage, include ExtKeyUsageAny.
	KeyUsages: [...#ExtKeyUsage] @go(,[]ExtKeyUsage)

	// MaxConstraintComparisions is the maximum number of comparisons to
	// perform when checking a given certificate's name constraints. If
	// zero, a sensible default is used. This limit prevents pathological
	// certificates from consuming excessive amounts of CPU time when
	// validating. It does not apply to the platform verifier.
	MaxConstraintComparisions: int
}

_#leafCertificate:         0
_#intermediateCertificate: 1
_#rootCertificate:         2

_#maxChainSignatureChecks: 100
