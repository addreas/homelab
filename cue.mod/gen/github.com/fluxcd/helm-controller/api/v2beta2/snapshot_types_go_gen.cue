// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/fluxcd/helm-controller/api/v2beta2

package v2beta2

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// snapshotStatusDeployed indicates that the release the snapshot was taken
// from is currently deployed.
_#snapshotStatusDeployed: "deployed"

// snapshotStatusSuperseded indicates that the release the snapshot was taken
// from has been superseded by a newer release.
_#snapshotStatusSuperseded: "superseded"

// snapshotTestPhaseFailed indicates that the test of the release the snapshot
// was taken from has failed.
_#snapshotTestPhaseFailed: "Failed"

// Snapshots is a list of Snapshot objects.
#Snapshots: [...null | #Snapshot]

// Snapshot captures a point-in-time copy of the status information for a Helm release,
// as managed by the controller.
#Snapshot: {
	// APIVersion is the API version of the Snapshot.
	// Provisional: when the calculation method of the Digest field is changed,
	// this field will be used to distinguish between the old and new methods.
	// +optional
	apiVersion?: string @go(APIVersion)

	// Digest is the checksum of the release object in storage.
	// It has the format of `<algo>:<checksum>`.
	// +required
	digest: string @go(Digest)

	// Name is the name of the release.
	// +required
	name: string @go(Name)

	// Namespace is the namespace the release is deployed to.
	// +required
	namespace: string @go(Namespace)

	// Version is the version of the release object in storage.
	// +required
	version: int @go(Version)

	// Status is the current state of the release.
	// +required
	status: string @go(Status)

	// ChartName is the chart name of the release object in storage.
	// +required
	chartName: string @go(ChartName)

	// ChartVersion is the chart version of the release object in
	// storage.
	// +required
	chartVersion: string @go(ChartVersion)

	// ConfigDigest is the checksum of the config (better known as
	// "values") of the release object in storage.
	// It has the format of `<algo>:<checksum>`.
	// +required
	configDigest: string @go(ConfigDigest)

	// FirstDeployed is when the release was first deployed.
	// +required
	firstDeployed: metav1.#Time @go(FirstDeployed)

	// LastDeployed is when the release was last deployed.
	// +required
	lastDeployed: metav1.#Time @go(LastDeployed)

	// Deleted is when the release was deleted.
	// +optional
	deleted?: metav1.#Time @go(Deleted)

	// TestHooks is the list of test hooks for the release as observed to be
	// run by the controller.
	// +optional
	testHooks?: null | {[string]: null | #TestHookStatus} @go(TestHooks,*map[string]*TestHookStatus)
}

// TestHookStatus holds the status information for a test hook as observed
// to be run by the controller.
#TestHookStatus: {
	// LastStarted is the time the test hook was last started.
	// +optional
	lastStarted?: metav1.#Time @go(LastStarted)

	// LastCompleted is the time the test hook last completed.
	// +optional
	lastCompleted?: metav1.#Time @go(LastCompleted)

	// Phase the test hook was observed to be in.
	// +optional
	phase?: string @go(Phase)
}
