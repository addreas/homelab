// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/fluxcd/source-controller/api/v1beta1

package v1beta1

import (
	"github.com/fluxcd/pkg/apis/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// HelmRepositoryKind is the string representation of a HelmRepository.
#HelmRepositoryKind: "HelmRepository"

// HelmRepositoryURLIndexKey is the key to use for indexing HelmRepository
// resources by their HelmRepositorySpec.URL.
#HelmRepositoryURLIndexKey: ".metadata.helmRepositoryURL"

// HelmRepositorySpec defines the reference to a Helm repository.
#HelmRepositorySpec: {
	// The Helm repository URL, a valid URL contains at least a protocol and host.
	// +required
	url: string @go(URL)

	// The name of the secret containing authentication credentials for the Helm
	// repository.
	// For HTTP/S basic auth the secret must contain username and
	// password fields.
	// For TLS the secret must contain a certFile and keyFile, and/or
	// caCert fields.
	// +optional
	secretRef?: null | meta.#LocalObjectReference @go(SecretRef,*meta.LocalObjectReference)

	// The interval at which to check the upstream for updates.
	// +required
	interval: metav1.#Duration @go(Interval)

	// The timeout of index downloading, defaults to 60s.
	// +kubebuilder:default:="60s"
	// +optional
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)

	// This flag tells the controller to suspend the reconciliation of this source.
	// +optional
	suspend?: bool @go(Suspend)
}

// HelmRepositoryStatus defines the observed state of the HelmRepository.
#HelmRepositoryStatus: {
	// ObservedGeneration is the last observed generation.
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)

	// Conditions holds the conditions for the HelmRepository.
	// +optional
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)

	// URL is the download link for the last index fetched.
	// +optional
	url?: string @go(URL)

	// Artifact represents the output of the last successful repository sync.
	// +optional
	artifact?: null | #Artifact @go(Artifact,*Artifact)

	meta.#ReconcileRequestStatus
}

// IndexationFailedReason represents the fact that the indexation of the given
// Helm repository failed.
#IndexationFailedReason: "IndexationFailed"

// IndexationSucceededReason represents the fact that the indexation of the
// given Helm repository succeeded.
#IndexationSucceededReason: "IndexationSucceed"

// HelmRepository is the Schema for the helmrepositories API
#HelmRepository: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta    @go(ObjectMeta)
	spec?:     #HelmRepositorySpec   @go(Spec)
	status?:   #HelmRepositoryStatus @go(Status)
}

// HelmRepositoryList contains a list of HelmRepository
// +kubebuilder:object:root=true
#HelmRepositoryList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#HelmRepository] @go(Items,[]HelmRepository)
}
