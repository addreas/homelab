// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/fluxcd/source-controller/api/v1beta1

package v1beta1

import (
	"github.com/fluxcd/pkg/apis/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BucketKind is the string representation of a Bucket.
#BucketKind: "Bucket"

// BucketSpec defines the desired state of an S3 compatible bucket
#BucketSpec: {
	// The S3 compatible storage provider name, default ('generic').
	// +kubebuilder:validation:Enum=generic;aws
	// +kubebuilder:default:=generic
	// +optional
	provider?: string @go(Provider)

	// The bucket name.
	// +required
	bucketName: string @go(BucketName)

	// The bucket endpoint address.
	// +required
	endpoint: string @go(Endpoint)

	// Insecure allows connecting to a non-TLS S3 HTTP endpoint.
	// +optional
	insecure?: bool @go(Insecure)

	// The bucket region.
	// +optional
	region?: string @go(Region)

	// The name of the secret containing authentication credentials
	// for the Bucket.
	// +optional
	secretRef?: null | meta.#LocalObjectReference @go(SecretRef,*meta.LocalObjectReference)

	// The interval at which to check for bucket updates.
	// +required
	interval: metav1.#Duration @go(Interval)

	// The timeout for download operations, defaults to 20s.
	// +kubebuilder:default="20s"
	// +optional
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)

	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	// +optional
	ignore?: null | string @go(Ignore,*string)

	// This flag tells the controller to suspend the reconciliation of this source.
	// +optional
	suspend?: bool @go(Suspend)
}

#GenericBucketProvider: "generic"
#AmazonBucketProvider:  "aws"

// BucketStatus defines the observed state of a bucket
#BucketStatus: {
	// ObservedGeneration is the last observed generation.
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)

	// Conditions holds the conditions for the Bucket.
	// +optional
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)

	// URL is the download link for the artifact output of the last Bucket sync.
	// +optional
	url?: string @go(URL)

	// Artifact represents the output of the last successful Bucket sync.
	// +optional
	artifact?: null | #Artifact @go(Artifact,*Artifact)

	meta.#ReconcileRequestStatus
}

// BucketOperationSucceedReason represents the fact that the bucket listing and
// download operations succeeded.
#BucketOperationSucceedReason: "BucketOperationSucceed"

// BucketOperationFailedReason represents the fact that the bucket listing or
// download operations failed.
#BucketOperationFailedReason: "BucketOperationFailed"

// Bucket is the Schema for the buckets API
#Bucket: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #BucketSpec        @go(Spec)
	status?:   #BucketStatus      @go(Status)
}

// BucketList contains a list of Bucket
#BucketList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Bucket] @go(Items,[]Bucket)
}
