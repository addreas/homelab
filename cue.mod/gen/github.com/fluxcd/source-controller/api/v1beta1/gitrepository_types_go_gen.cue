// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/fluxcd/source-controller/api/v1beta1

package v1beta1

import (
	"github.com/fluxcd/pkg/apis/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GitRepositoryKind is the string representation of a GitRepository.
#GitRepositoryKind: "GitRepository"

// GoGitImplementation represents the go-git Git implementation kind.
#GoGitImplementation: "go-git"

// LibGit2Implementation represents the git2go Git implementation kind.
#LibGit2Implementation: "libgit2"

// GitRepositorySpec defines the desired state of a Git repository.
#GitRepositorySpec: {
	// The repository URL, can be a HTTP/S or SSH address.
	// +kubebuilder:validation:Pattern="^(http|https|ssh)://"
	// +required
	url: string @go(URL)

	// The secret name containing the Git credentials.
	// For HTTPS repositories the secret must contain username and password
	// fields.
	// For SSH repositories the secret must contain identity, identity.pub and
	// known_hosts fields.
	// +optional
	secretRef?: null | meta.#LocalObjectReference @go(SecretRef,*meta.LocalObjectReference)

	// The interval at which to check for repository updates.
	// +required
	interval: metav1.#Duration @go(Interval)

	// The timeout for remote Git operations like cloning, defaults to 20s.
	// +kubebuilder:default="20s"
	// +optional
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)

	// The Git reference to checkout and monitor for changes, defaults to
	// master branch.
	// +optional
	ref?: null | #GitRepositoryRef @go(Reference,*GitRepositoryRef)

	// Verify OpenPGP signature for the Git commit HEAD points to.
	// +optional
	verify?: null | #GitRepositoryVerification @go(Verification,*GitRepositoryVerification)

	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	// +optional
	ignore?: null | string @go(Ignore,*string)

	// This flag tells the controller to suspend the reconciliation of this source.
	// +optional
	suspend?: bool @go(Suspend)

	// Determines which git client library to use.
	// Defaults to go-git, valid values are ('go-git', 'libgit2').
	// +kubebuilder:validation:Enum=go-git;libgit2
	// +kubebuilder:default:=go-git
	// +optional
	gitImplementation?: string @go(GitImplementation)
}

// GitRepositoryRef defines the Git ref used for pull and checkout operations.
#GitRepositoryRef: {
	// The Git branch to checkout, defaults to master.
	// +kubebuilder:default:=master
	// +optional
	branch?: string @go(Branch)

	// The Git tag to checkout, takes precedence over Branch.
	// +optional
	tag?: string @go(Tag)

	// The Git tag semver expression, takes precedence over Tag.
	// +optional
	semver?: string @go(SemVer)

	// The Git commit SHA to checkout, if specified Tag filters will be ignored.
	// +optional
	commit?: string @go(Commit)
}

// GitRepositoryVerification defines the OpenPGP signature verification process.
#GitRepositoryVerification: {
	// Mode describes what git object should be verified, currently ('head').
	// +kubebuilder:validation:Enum=head
	mode: string @go(Mode)

	// The secret name containing the public keys of all trusted Git authors.
	secretRef?: meta.#LocalObjectReference @go(SecretRef)
}

// GitRepositoryStatus defines the observed state of a Git repository.
#GitRepositoryStatus: {
	// ObservedGeneration is the last observed generation.
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)

	// Conditions holds the conditions for the GitRepository.
	// +optional
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)

	// URL is the download link for the artifact output of the last repository
	// sync.
	// +optional
	url?: string @go(URL)

	// Artifact represents the output of the last successful repository sync.
	// +optional
	artifact?: null | #Artifact @go(Artifact,*Artifact)

	meta.#ReconcileRequestStatus
}

// GitOperationSucceedReason represents the fact that the git clone, pull
// and checkout operations succeeded.
#GitOperationSucceedReason: "GitOperationSucceed"

// GitOperationFailedReason represents the fact that the git clone, pull or
// checkout operations failed.
#GitOperationFailedReason: "GitOperationFailed"

// GitRepository is the Schema for the gitrepositories API
#GitRepository: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta   @go(ObjectMeta)
	spec?:     #GitRepositorySpec   @go(Spec)
	status?:   #GitRepositoryStatus @go(Status)
}

// GitRepositoryList contains a list of GitRepository
// +kubebuilder:object:root=true
#GitRepositoryList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GitRepository] @go(Items,[]GitRepository)
}
