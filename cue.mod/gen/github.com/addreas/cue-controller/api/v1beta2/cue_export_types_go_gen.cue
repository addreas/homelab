// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/addreas/cue-controller/api/v1beta2

package v1beta2

import (
	"github.com/fluxcd/pkg/apis/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/api/core/v1"
)

#CueExportKind:             "CueExport"
#CueExportFinalizer:        "finalizers.fluxcd.io"
#MaxConditionMessageLength: 20000
#EnabledValue:              "enabled"
#DisabledValue:             "disabled"
#MergeValue:                "merge"

// CueExportSpec defines the configuration to calculate the desired state from a Source using Kustomize.
#CueExportSpec: {
	// DependsOn may contain a meta.NamespacedObjectReference slice
	// with references to CueExport resources that must be ready before this
	// CueExport can be reconciled.
	// +optional
	dependsOn?: [...meta.#NamespacedObjectReference] @go(DependsOn,[]meta.NamespacedObjectReference)

	// The interval at which to reconcile the CueExport.
	// +kubebuilder:validation:Type=string
	// +kubebuilder:validation:Pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$"
	// +required
	interval: metav1.#Duration @go(Interval)

	// The interval at which to retry a previously failed reconciliation.
	// When not specified, the controller uses the CueExportSpec.Interval
	// value to retry failures.
	// +kubebuilder:validation:Type=string
	// +kubebuilder:validation:Pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$"
	// +optional
	retryInterval?: null | metav1.#Duration @go(RetryInterval,*metav1.Duration)

	// The KubeConfig for reconciling the CueExport on a remote cluster.
	// When used in combination with CueExportSpec.ServiceAccountName,
	// forces the controller to act on behalf of that Service Account at the
	// target cluster.
	// If the --default-service-account flag is set, its value will be used as
	// a controller level fallback for when CueExportSpec.ServiceAccountName
	// is empty.
	// +optional
	kubeConfig?: null | meta.#KubeConfigReference @go(KubeConfig,*meta.KubeConfigReference)

	// The module root of the CUE instance.
	// +optional
	root?: string @go(Root)

	// The paths at which the CUE instances will be built from.
	// +optional
	paths?: [...string] @go(Paths,[]string)

	// The CUE package to use for the CUE instance. This is useful when applying
	// a CUE schema to plain yaml files.
	// +optional
	package?: string @go(Package)

	// Tags that will be injected into the CUE instance.
	// +optional
	tags?: [...#TagVar] @go(Tags,[]TagVar)

	// TagVars that will be available to the CUE instance.
	// +optional
	tagVars?: [...#TagVar] @go(TagVars,[]TagVar)

	// The CUE expression(s) to execute.
	// +optional
	expressions?: [...string] @go(Exprs,[]string)

	// A list of CUE expressions that must be true for the CUE instance to be
	// reconciled
	// +optional
	gates?: [...#GateExpr] @go(Gates,[]GateExpr)

	// Prune enables garbage collection.
	// +required
	prune: bool @go(Prune)

	// A list of resources to be included in the health assessment.
	// +optional
	healthChecks?: [...meta.#NamespacedObjectKindReference] @go(HealthChecks,[]meta.NamespacedObjectKindReference)

	// The name of the Kubernetes service account to impersonate
	// when reconciling this CueExport.
	// +optional
	serviceAccountName?: string @go(ServiceAccountName)

	// Reference of the source where the cue files are.
	// +required
	sourceRef: #CrossNamespaceSourceReference @go(SourceRef)

	// This flag tells the controller to suspend subsequent cue exports,
	// it does not apply to already started executions. Defaults to false.
	// +optional
	suspend?: bool @go(Suspend)

	// Timeout for validation, apply and health checking operations.
	// Defaults to 'Interval' duration.
	// +kubebuilder:validation:Type=string
	// +kubebuilder:validation:Pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$"
	// +optional
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)

	// Force instructs the controller to recreate resources
	// when patching fails due to an immutable field change.
	// +kubebuilder:default:=false
	// +optional
	force?: bool @go(Force)

	// Wait instructs the controller to check the health of all the reconciled resources.
	// When enabled, the HealthChecks are ignored. Defaults to false.
	// +optional
	wait?: bool @go(Wait)
}

// GateExpr defines a CUE expression that must be true for the CUE instance to be reconciled
#GateExpr: {
	// The CUE expression to evaluate.
	// +required
	expr: string @go(Expr)

	// The name of the gate.
	// +required
	name: string @go(Name)
}

// TagVar is a tag variable with a required name and optional value
#TagVar: {
	// +required
	name: string @go(Name)

	// +optional
	value?: string @go(Value)

	// Source for the environment variable's value. Cannot be used if value is not empty.
	// +optional
	valueFrom?: null | #TagVarSource @go(ValueFrom,*TagVarSource)
}

// TagVarSource represents a source for the value of an EnvVar.
#TagVarSource: {
	// Selects a key of a ConfigMap.
	// +optional
	configMapKeyRef?: null | v1.#ConfigMapKeySelector @go(ConfigMapKeyRef,*v1.ConfigMapKeySelector)

	// Selects a key of a secret in the pod's namespace
	// +optional
	secretKeyRef?: null | v1.#SecretKeySelector @go(SecretKeyRef,*v1.SecretKeySelector)
}

// CueExportStatus defines the observed state of a CueExport.
#CueExportStatus: {
	meta.#ReconcileRequestStatus

	// ObservedGeneration is the last reconciled generation.
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)

	// +optional
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)

	// The last successfully applied revision.
	// Equals the Revision of the applied Artifact from the referenced Source.
	// +optional
	lastAppliedRevision?: string @go(LastAppliedRevision)

	// LastAttemptedRevision is the revision of the last reconciliation attempt.
	// +optional
	lastAttemptedRevision?: string @go(LastAttemptedRevision)

	// Inventory contains the list of Kubernetes resource object references that have been successfully applied.
	// +optional
	inventory?: null | #ResourceInventory @go(Inventory,*ResourceInventory)
}

// CueExport is the Schema for the cue controller API.
#CueExport: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #CueExportSpec     @go(Spec)

	// +kubebuilder:default:={"observedGeneration":-1}
	status?: #CueExportStatus @go(Status)
}

// CueExportList contains a list of CueExports.
#CueExportList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#CueExport] @go(Items,[]CueExport)
}
