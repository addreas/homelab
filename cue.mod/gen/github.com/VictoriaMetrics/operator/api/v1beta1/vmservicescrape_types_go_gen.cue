// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/VictoriaMetrics/operator/api/v1beta1

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
	"k8s.io/api/core/v1"
)

// VMServiceScrapeSpec defines the desired state of VMServiceScrape
#VMServiceScrapeSpec: {
	// DiscoveryRole - defines kubernetes_sd role for objects discovery.
	// by default, its endpoints.
	// can be changed to service or endpointslices.
	// note, that with service setting, you have to use port: "name"
	// and cannot use targetPort for endpoints.
	// +optional
	// +kubebuilder:validation:Enum=endpoints;service;endpointslices
	discoveryRole?: string @go(DiscoveryRole)

	// The label to use to retrieve the job name from.
	// +optional
	jobLabel?: string @go(JobLabel)

	// TargetLabels transfers labels on the Kubernetes Service onto the target.
	// +optional
	targetLabels?: [...string] @go(TargetLabels,[]string)

	// PodTargetLabels transfers labels on the Kubernetes Pod onto the target.
	// +optional
	podTargetLabels?: [...string] @go(PodTargetLabels,[]string)

	// A list of endpoints allowed as part of this ServiceScrape.
	endpoints: [...#Endpoint] @go(Endpoints,[]Endpoint)

	// Selector to select Endpoints objects by corresponding Service labels.
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.displayName="Service selector"
	// +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors.x-descriptors="urn:alm:descriptor:com.tectonic.ui:selector:"
	selector: metav1.#LabelSelector @go(Selector)

	// Selector to select which namespaces the Endpoints objects are discovered from.
	// +optional
	namespaceSelector?: #NamespaceSelector @go(NamespaceSelector)

	// SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
	// +optional
	sampleLimit?: uint64 @go(SampleLimit)
}

// VMServiceScrapeStatus defines the observed state of VMServiceScrape
#VMServiceScrapeStatus: {
}

// VMServiceScrape is scrape configuration for endpoints associated with
// kubernetes service,
// it generates scrape configuration for vmagent based on selectors.
// result config will scrape service endpoints
// +operator-sdk:gen-csv:customresourcedefinitions.displayName="VMServiceScrape"
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=vmservicescrapes,scope=Namespaced
// +genclient
#VMServiceScrape: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta     @go(ObjectMeta)
	spec:      #VMServiceScrapeSpec   @go(Spec)
	status?:   #VMServiceScrapeStatus @go(Status)
}

// VMServiceScrapeList contains a list of VMServiceScrape
#VMServiceScrapeList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VMServiceScrape] @go(Items,[]VMServiceScrape)
}

// NamespaceSelector is a selector for selecting either all namespaces or a
// list of namespaces.
// +k8s:openapi-gen=true
#NamespaceSelector: {
	// Boolean describing whether all namespaces are selected in contrast to a
	// list restricting them.
	// +optional
	any?: bool @go(Any)

	// List of namespace names.
	// +optional
	matchNames?: [...string] @go(MatchNames,[]string)
}

// Endpoint defines a scrapeable endpoint serving Prometheus metrics.
// +k8s:openapi-gen=true
#Endpoint: {
	// Name of the service port this endpoint refers to. Mutually exclusive with targetPort.
	// +optional
	port?: string @go(Port)

	// Name or number of the pod port this endpoint refers to. Mutually exclusive with port.
	// +optional
	targetPort?: null | intstr.#IntOrString @go(TargetPort,*intstr.IntOrString)

	// HTTP path to scrape for metrics.
	// +optional
	path?: string @go(Path)

	// HTTP scheme to use for scraping.
	// +optional
	scheme?: string @go(Scheme)

	// Optional HTTP URL parameters
	// +optional
	params?: {[string]: [...string]} @go(Params,map[string][]string)

	// Interval at which metrics should be scraped
	// +optional
	interval?: string @go(Interval)

	// Timeout after which the scrape is ended
	// +optional
	scrapeTimeout?: string @go(ScrapeTimeout)

	// TLSConfig configuration to use when scraping the endpoint
	// +optional
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// File to read bearer token for scraping targets.
	// +optional
	bearerTokenFile?: string @go(BearerTokenFile)

	// Secret to mount to read bearer token for scraping targets. The secret
	// needs to be in the same namespace as the service scrape and accessible by
	// the victoria-metrics operator.
	// +optional
	bearerTokenSecret?: v1.#SecretKeySelector @go(BearerTokenSecret)

	// HonorLabels chooses the metric's labels on collisions with target labels.
	// +optional
	honorLabels?: bool @go(HonorLabels)

	// HonorTimestamps controls whether vmagent respects the timestamps present in scraped data.
	// +optional
	honorTimestamps?: null | bool @go(HonorTimestamps,*bool)

	// BasicAuth allow an endpoint to authenticate over basic authentication
	// More info: https://prometheus.io/docs/operating/configuration/#endpoints
	// +optional
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// MetricRelabelConfigs to apply to samples before ingestion.
	// +optional
	metricRelabelConfigs?: [...null | #RelabelConfig] @go(MetricRelabelConfigs,[]*RelabelConfig)

	// RelabelConfigs to apply to samples before scraping.
	// More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
	// +optional
	relabelConfigs?: [...null | #RelabelConfig] @go(RelabelConfigs,[]*RelabelConfig)

	// ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
	// +optional
	proxyURL?: null | string @go(ProxyURL,*string)
}

// TLSConfig specifies TLSConfig configuration parameters.
// +k8s:openapi-gen=true
#TLSConfig: {
	// Path to the CA cert in the container to use for the targets.
	// +optional
	caFile?: string @go(CAFile)

	// Stuct containing the CA cert to use for the targets.
	// +optional
	ca?: #SecretOrConfigMap @go(CA)

	// Path to the client cert file in the container for the targets.
	// +optional
	certFile?: string @go(CertFile)

	// Struct containing the client cert file for the targets.
	// +optional
	cert?: #SecretOrConfigMap @go(Cert)

	// Path to the client key file in the container for the targets.
	// +optional
	keyFile?: string @go(KeyFile)

	// Secret containing the client key file for the targets.
	// +optional
	keySecret?: null | v1.#SecretKeySelector @go(KeySecret,*v1.SecretKeySelector)

	// Used to verify the hostname for the targets.
	// +optional
	serverName?: string @go(ServerName)

	// Disable target certificate validation.
	// +optional
	insecureSkipVerify?: bool @go(InsecureSkipVerify)
}

// SecretOrConfigMap allows to specify data as a Secret or ConfigMap. Fields are mutually exclusive.
#SecretOrConfigMap: {
	// Secret containing data to use for the targets.
	// +optional
	secret?: null | v1.#SecretKeySelector @go(Secret,*v1.SecretKeySelector)

	// ConfigMap containing data to use for the targets.
	// +optional
	configMap?: null | v1.#ConfigMapKeySelector @go(ConfigMap,*v1.ConfigMapKeySelector)
}

// RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion.
// It defines `<metric_relabel_configs>`-section of configuration.
// More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
// +k8s:openapi-gen=true
#RelabelConfig: {
	// UnderScoreSourceLabels - additional form of source labels source_labels
	// for compatibility with original relabel config.
	// if set  both sourceLabels and source_labels, sourceLabels has priority.
	// for details https://github.com/VictoriaMetrics/operator/issues/131
	// +optional
	source_labels?: [...string] @go(UnderScoreSourceLabels,[]string)

	// UnderScoreTargetLabel - additional form of target label - target_label
	// for compatibility with original relabel config.
	// if set  both targetLabel and target_label, targetLabel has priority.
	// for details https://github.com/VictoriaMetrics/operator/issues/131
	// +optional
	target_label?: string @go(UnderScoreTargetLabel)

	//The source labels select values from existing labels. Their content is concatenated
	//using the configured separator and matched against the configured regular expression
	//for the replace, keep, and drop actions.
	// +optional
	sourceLabels?: [...string] @go(SourceLabels,[]string)

	//Separator placed between concatenated source label values. default is ';'.
	// +optional
	separator?: string @go(Separator)

	//Label to which the resulting value is written in a replace action.
	//It is mandatory for replace actions. Regex capture groups are available.
	// +optional
	targetLabel?: string @go(TargetLabel)

	//Regular expression against which the extracted value is matched. Default is '(.*)'
	// +optional
	regex?: string @go(Regex)

	// Modulus to take of the hash of the source label values.
	// +optional
	modulus?: uint64 @go(Modulus)

	//Replacement value against which a regex replace is performed if the
	//regular expression matches. Regex capture groups are available. Default is '$1'
	// +optional
	replacement?: string @go(Replacement)

	// Action to perform based on regex matching. Default is 'replace'
	// +optional
	action?: string @go(Action)
}

// RemoteWriteSpec defines the remote_write configuration.
// +k8s:openapi-gen=true
#RemoteWriteSpec: {
	// The URL of the endpoint to send samples to.
	url: string @go(URL)

	// The name of the remote write queue, must be unique if specified. The
	// name is used in metrics and logging in order to differentiate queues.
	// +optional
	name?: string @go(Name)

	// Timeout for requests to the remote write endpoint.
	// +optional
	remoteTimeout?: string @go(RemoteTimeout)

	// The list of remote write relabel configurations.
	// +optional
	writeRelabelConfigs?: [...#RelabelConfig] @go(WriteRelabelConfigs,[]RelabelConfig)

	//BasicAuth for the URL.
	// +optional
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// File to read bearer token for remote write.
	// +optional
	bearerToken?: string @go(BearerToken)

	// File to read bearer token for remote write.
	// +optional
	bearerTokenFile?: string @go(BearerTokenFile)

	// TLSConfig Config to use for remote write.
	// +optional
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// Optional ProxyURL
	// +optional
	proxyURL?: string @go(ProxyURL)

	// QueueConfig allows tuning of the remote write queue parameters.
	// +optional
	queueConfig?: null | #QueueConfig @go(QueueConfig,*QueueConfig)
}

// QueueConfig allows the tuning of remote_write queue_config parameters. This object
// is referenced in the RemoteWriteSpec object.
// +k8s:openapi-gen=true
#QueueConfig: {
	// Capacity is the number of samples to buffer per shard before we start dropping them.
	// +optional
	capacity?: int @go(Capacity)

	// MinShards is the minimum number of shards, i.e. amount of concurrency.
	// +optional
	minShards?: int @go(MinShards)

	// MaxShards is the maximum number of shards, i.e. amount of concurrency.
	// +optional
	maxShards?: int @go(MaxShards)

	// MaxSamplesPerSend is the maximum number of samples per send.
	// +optional
	maxSamplesPerSend?: int @go(MaxSamplesPerSend)

	// BatchSendDeadline is the maximum time a sample will wait in buffer.
	// +optional
	batchSendDeadline?: string @go(BatchSendDeadline)

	// MaxRetries is the maximum number of times to retry a batch on recoverable errors.
	// +optional
	maxRetries?: int @go(MaxRetries)

	// MinBackoff is the initial retry delay. Gets doubled for every retry.
	// +optional
	minBackoff?: string @go(MinBackoff)

	// MaxBackoff is the maximum retry delay.
	// +optional
	maxBackoff?: string @go(MaxBackoff)
}

// APIServerConfig defines a host and auth methods to access apiserver.
// More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config
// +k8s:openapi-gen=true
#APIServerConfig: {
	// Host of apiserver.
	// A valid string consisting of a hostname or IP followed by an optional port number
	host: string @go(Host)

	// BasicAuth allow an endpoint to authenticate over basic authentication
	// +optional
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// Bearer token for accessing apiserver.
	// +optional
	bearerToken?: string @go(BearerToken)

	// File to read bearer token for accessing apiserver.
	// +optional
	bearerTokenFile?: string @go(BearerTokenFile)

	// TLSConfig Config to use for accessing apiserver.
	// +optional
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)
}
