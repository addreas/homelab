// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cilium/cilium/api/v1/models

package models

// BgpPeer State of a BGP Peer
//
// +k8s:deepcopy-gen=true
//
// swagger:model BgpPeer
#BgpPeer: {
	// Applied initial value for the BGP HoldTimer (RFC 4271, Section 4.2) in seconds.
	// The applied value holds the value that is in effect on the current BGP session.
	//
	"applied-hold-time-seconds"?: int64 @go(AppliedHoldTimeSeconds)

	// Applied initial value for the BGP KeepaliveTimer (RFC 4271, Section 8) in seconds.
	// The applied value holds the value that is in effect on the current BGP session.
	//
	"applied-keep-alive-time-seconds"?: int64 @go(AppliedKeepAliveTimeSeconds)

	// Configured initial value for the BGP HoldTimer (RFC 4271, Section 4.2) in seconds.
	// The configured value will be used for negotiation with the peer during the BGP session establishment.
	//
	"configured-hold-time-seconds"?: int64 @go(ConfiguredHoldTimeSeconds)

	// Configured initial value for the BGP KeepaliveTimer (RFC 4271, Section 8) in seconds.
	// The applied value may be different than the configured value, as it depends on the negotiated hold time interval.
	//
	"configured-keep-alive-time-seconds"?: int64 @go(ConfiguredKeepAliveTimeSeconds)

	// Initial value for the BGP ConnectRetryTimer (RFC 4271, Section 8) in seconds
	"connect-retry-time-seconds"?: int64 @go(ConnectRetryTimeSeconds)

	// Time To Live (TTL) value used in BGP packets sent to the eBGP neighbor.
	// 1 implies that eBGP multi-hop feature is disabled (only a single hop is allowed).
	//
	"ebgp-multihop-ttl"?: int64 @go(EbgpMultihopTTL)

	// BGP peer address family state
	families: [...null | #BgpPeerFamilies] @go(Families,[]*BgpPeerFamilies)

	// Graceful restart capability
	"graceful-restart"?: null | #BgpGracefulRestart @go(GracefulRestart,*BgpGracefulRestart)

	// Local AS Number
	"local-asn"?: int64 @go(LocalAsn)

	// IP Address of peer
	"peer-address"?: string @go(PeerAddress)

	// Peer AS Number
	"peer-asn"?: int64 @go(PeerAsn)

	// TCP port number of peer
	// Maximum: 65535
	// Minimum: 1
	"peer-port"?: int64 @go(PeerPort)

	// BGP peer operational state as described here
	// https://www.rfc-editor.org/rfc/rfc4271#section-8.2.2
	//
	"session-state"?: string @go(SessionState)

	// Set when a TCP password is configured for communications with this peer
	"tcp-password-enabled"?: bool @go(TCPPasswordEnabled)

	// BGP peer connection uptime in nano seconds.
	"uptime-nanoseconds"?: int64 @go(UptimeNanoseconds)
}
