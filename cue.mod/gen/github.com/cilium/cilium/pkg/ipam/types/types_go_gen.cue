// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cilium/cilium/pkg/ipam/types

package types

import "github.com/cilium/cilium/pkg/cidr"

// Limits specifies the IPAM relevant instance limits
#Limits: {
	// Adapters specifies the maximum number of interfaces that can be
	// attached to the instance
	Adapters: int

	// IPv4 is the maximum number of IPv4 addresses per adapter/interface
	IPv4: int

	// IPv6 is the maximum number of IPv6 addresses per adapter/interface
	IPv6: int

	// HypervisorType tracks the instance's hypervisor type if available. Used to determine if features like prefix
	// delegation are supported on an instance. Bare metal instances would have empty string.
	HypervisorType: string
}

// AllocationIP is an IP which is available for allocation, or already
// has been allocated
#AllocationIP: {
	// Owner is the owner of the IP. This field is set if the IP has been
	// allocated. It will be set to the pod name or another identifier
	// representing the usage of the IP
	//
	// The owner field is left blank for an entry in Spec.IPAM.Pool and
	// filled out as the IP is used and also added to Status.IPAM.Used.
	//
	// +optional
	owner?: string @go(Owner)

	// Resource is set for both available and allocated IPs, it represents
	// what resource the IP is associated with, e.g. in combination with
	// AWS ENI, this will refer to the ID of the ENI
	//
	// +optional
	resource?: string @go(Resource)
}

// AllocationMap is a map of allocated IPs indexed by IP
#AllocationMap: {[string]: #AllocationIP}

// IPAMSpec is the IPAM specification of the node
//
// This structure is embedded into v2.CiliumNode
#IPAMSpec: {
	// Pool is the list of IPs available to the node for allocation. When
	// an IP is used, the IP will remain on this list but will be added to
	// Status.IPAM.Used
	//
	// +optional
	pool?: #AllocationMap @go(Pool)

	// PodCIDRs is the list of CIDRs available to the node for allocation.
	// When an IP is used, the IP will be added to Status.IPAM.Used
	//
	// +optional
	podCIDRs?: [...string] @go(PodCIDRs,[]string)

	// MinAllocate is the minimum number of IPs that must be allocated when
	// the node is first bootstrapped. It defines the minimum base socket
	// of addresses that must be available. After reaching this watermark,
	// the PreAllocate and MaxAboveWatermark logic takes over to continue
	// allocating IPs.
	//
	// +kubebuilder:validation:Minimum=0
	"min-allocate"?: int @go(MinAllocate)

	// MaxAllocate is the maximum number of IPs that can be allocated to the
	// node. When the current amount of allocated IPs will approach this value,
	// the considered value for PreAllocate will decrease down to 0 in order to
	// not attempt to allocate more addresses than defined.
	//
	// +kubebuilder:validation:Minimum=0
	"max-allocate"?: int @go(MaxAllocate)

	// PreAllocate defines the number of IP addresses that must be
	// available for allocation in the IPAMspec. It defines the buffer of
	// addresses available immediately without requiring cilium-operator to
	// get involved.
	//
	// +kubebuilder:validation:Minimum=0
	"pre-allocate"?: int @go(PreAllocate)

	// MaxAboveWatermark is the maximum number of addresses to allocate
	// beyond the addresses needed to reach the PreAllocate watermark.
	// Going above the watermark can help reduce the number of API calls to
	// allocate IPs, e.g. when a new ENI is allocated, as many secondary
	// IPs as possible are allocated. Limiting the amount can help reduce
	// waste of IPs.
	//
	// +kubebuilder:validation:Minimum=0
	"max-above-watermark"?: int @go(MaxAboveWatermark)

	// PodCIDRAllocationThreshold defines the minimum number of free IPs which
	// must be available to this node via its pod CIDR pool. If the total number
	// of IP addresses in the pod CIDR pool is less than this value, the pod
	// CIDRs currently in-use by this node will be marked as depleted and
	// cilium-operator will allocate a new pod CIDR to this node.
	// This value effectively defines the buffer of IP addresses available
	// immediately without requiring cilium-operator to get involved.
	//
	// +kubebuilder:validation:Minimum=0
	"pod-cidr-allocation-threshold"?: int @go(PodCIDRAllocationThreshold)

	// PodCIDRReleaseThreshold defines the maximum number of free IPs which may
	// be available to this node via its pod CIDR pool. While the total number
	// of free IP addresses in the pod CIDR pool is larger than this value,
	// cilium-agent will attempt to release currently unused pod CIDRs.
	//
	// +kubebuilder:validation:Minimum=0
	"pod-cidr-release-threshold"?: int @go(PodCIDRReleaseThreshold)
}

// IPReleaseStatus  defines the valid states in IP release handshake
//
// +kubebuilder:validation:Enum=marked-for-release;ready-for-release;do-not-release;released
#IPReleaseStatus: string

// IPAMStatus is the IPAM status of a node
//
// This structure is embedded into v2.CiliumNode
#IPAMStatus: {
	// Used lists all IPs out of Spec.IPAM.Pool which have been allocated
	// and are in use.
	//
	// +optional
	used?: #AllocationMap @go(Used)

	// PodCIDRs lists the status of each pod CIDR allocated to this node.
	//
	// +optional
	"pod-cidrs"?: #PodCIDRMap @go(PodCIDRs)

	// Operator is the Operator status of the node
	//
	// +optional
	"operator-status"?: #OperatorStatus @go(OperatorStatus)

	// ReleaseIPs tracks the state for every IP considered for release.
	// value can be one of the following string :
	// * marked-for-release : Set by operator as possible candidate for IP
	// * ready-for-release  : Acknowledged as safe to release by agent
	// * do-not-release     : IP already in use / not owned by the node. Set by agent
	// * released           : IP successfully released. Set by operator
	//
	// +optional
	"release-ips"?: {[string]: #IPReleaseStatus} @go(ReleaseIPs,map[string]IPReleaseStatus)
}

#PodCIDRMap: [string]: #PodCIDRMapEntry

// +kubebuilder:validation:Enum=released;depleted;in-use
#PodCIDRStatus: string // #enumPodCIDRStatus

#enumPodCIDRStatus:
	#PodCIDRStatusReleased |
	#PodCIDRStatusDepleted |
	#PodCIDRStatusInUse

#PodCIDRStatusReleased: #PodCIDRStatus & "released"
#PodCIDRStatusDepleted: #PodCIDRStatus & "depleted"
#PodCIDRStatusInUse:    #PodCIDRStatus & "in-use"

#PodCIDRMapEntry: {
	// Status describes the status of a pod CIDR
	//
	// +optional
	status?: #PodCIDRStatus @go(Status)
}

// OperatorStatus is the status used by cilium-operator to report
// errors in case the allocation CIDR failed.
#OperatorStatus: {
	// Error is the error message set by cilium-operator.
	//
	// +optional
	error?: string @go(Error)
}

// Tags implements generic key value tags
#Tags: {[string]: string}

// Subnet is a representation of a subnet
#Subnet: {
	// ID is the subnet ID
	ID: string

	// Name is the subnet name
	Name: string

	// CIDR is the CIDR associated with the subnet
	CIDR?: null | cidr.#CIDR @go(,*cidr.CIDR)

	// AvailabilityZone is the availability zone of the subnet
	AvailabilityZone: string

	// VirtualNetworkID is the virtual network the subnet is in
	VirtualNetworkID: string

	// AvailableAddresses is the number of addresses available for
	// allocation
	AvailableAddresses: int

	// Tags is the tags of the subnet
	Tags: #Tags
}

// SubnetMap indexes subnets by subnet ID
#SubnetMap: {[string]: null | #Subnet}

// VirtualNetwork is the representation of a virtual network
#VirtualNetwork: {
	// ID is the ID of the virtual network
	ID: string

	// PrimaryCIDR is the primary IPv4 CIDR
	PrimaryCIDR: string

	// CIDRs is the list of secondary IPv4 CIDR ranges associated with the VPC
	CIDRs: [...string] @go(,[]string)
}

// VirtualNetworkMap indexes virtual networks by their ID
#VirtualNetworkMap: {[string]: null | #VirtualNetwork}

#PoolNotExists: #PoolID & ""

#PoolUnspec: #PoolID & ""

// PoolID is the type used to identify an IPAM pool
#PoolID: string // #enumPoolID

#enumPoolID:
	#PoolNotExists |
	#PoolUnspec

// PoolQuota defines the limits of an IPAM pool
#PoolQuota: {
	// AvailabilityZone is the availability zone in which the IPAM pool resides in
	AvailabilityZone: string

	// AvailableIPs is the number of available IPs in the pool
	AvailableIPs: int
}

// PoolQuotaMap is a map of pool quotas indexes by pool identifier
#PoolQuotaMap: {[string]: #PoolQuota}

// Interface is the implementation of a IPAM relevant network interface
// +k8s:deepcopy-gen=false
// +deepequal-gen=false
#Interface: _

// InterfaceRevision is the configurationr revision of a network interface. It
// consists of a revision hash representing the current configuration version
// and the resource itself.
//
// +k8s:deepcopy-gen=false
// +deepequal-gen=false
#InterfaceRevision: {
	// Resource is the interface resource
	Resource: #Interface

	// Fingerprint is the fingerprint reprsenting the network interface
	// configuration. It is typically implemented as the result of a hash
	// function calculated off the resource. This field is optional, not
	// all IPAM backends make use of fingerprints.
	Fingerprint: string
}

// Instance is the representation of an instance, typically a VM, subject to
// per-node IPAM logic
//
// +k8s:deepcopy-gen=false
// +deepequal-gen=false
#Instance: {
	// interfaces is a map of all interfaces attached to the instance
	// indexed by the interface ID
	Interfaces: {[string]: #InterfaceRevision} @go(,map[string]InterfaceRevision)
}

#Address: _
