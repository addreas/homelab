// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2

package v2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"github.com/cilium/cilium/pkg/policy/api"
	slimv1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// CiliumNetworkPolicy is a Kubernetes third-party resource with an extended
// version of NetworkPolicy.
#CiliumNetworkPolicy: {
	metav1.#TypeMeta

	// +deepequal-gen=false
	metadata: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec is the desired Cilium specific rule specification.
	spec?: null | api.#Rule @go(Spec,*api.Rule)

	// Specs is a list of desired Cilium specific rule specification.
	specs?: api.#Rules @go(Specs)

	// Status is the status of the Cilium policy rule
	//
	// +deepequal-gen=false
	// +kubebuilder:validation:Optional
	status: #CiliumNetworkPolicyStatus @go(Status)
}

// CiliumNetworkPolicyStatus is the status of a Cilium policy rule.
#CiliumNetworkPolicyStatus: {
	// Nodes is the Cilium policy status for each node
	nodes?: {[string]: #CiliumNetworkPolicyNodeStatus} @go(Nodes,map[string]CiliumNetworkPolicyNodeStatus)

	// DerivativePolicies is the status of all policies derived from the Cilium
	// policy
	derivativePolicies?: {[string]: #CiliumNetworkPolicyNodeStatus} @go(DerivativePolicies,map[string]CiliumNetworkPolicyNodeStatus)
}

// CiliumNetworkPolicyNodeStatus is the status of a Cilium policy rule for a
// specific node.
#CiliumNetworkPolicyNodeStatus: {
	// OK is true when the policy has been parsed and imported successfully
	// into the in-memory policy repository on the node.
	ok?: bool @go(OK)

	// Error describes any error that occurred when parsing or importing the
	// policy, or realizing the policy for the endpoints to which it applies
	// on the node.
	error?: string @go(Error)

	// LastUpdated contains the last time this status was updated
	lastUpdated?: slimv1.#Time @go(LastUpdated)

	// Revision is the policy revision of the repository which first implemented
	// this policy.
	localPolicyRevision?: uint64 @go(Revision)

	// Enforcing is set to true once all endpoints present at the time the
	// policy has been imported are enforcing this policy.
	enforcing?: bool @go(Enforcing)

	// Annotations corresponds to the Annotations in the ObjectMeta of the CNP
	// that have been realized on the node for CNP. That is, if a CNP has been
	// imported and has been assigned annotation X=Y by the user,
	// Annotations in CiliumNetworkPolicyNodeStatus will be X=Y once the
	// CNP that was imported corresponding to Annotation X=Y has been realized on
	// the node.
	annotations?: {[string]: string} @go(Annotations,map[string]string)
}

// CiliumNetworkPolicyList is a list of CiliumNetworkPolicy objects.
#CiliumNetworkPolicyList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)

	// Items is a list of CiliumNetworkPolicy
	items: [...#CiliumNetworkPolicy] @go(Items,[]CiliumNetworkPolicy)
}
