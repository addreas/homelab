// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2

package v2

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// CiliumExternalWorkload is a Kubernetes Custom Resource that
// contains a specification for an external workload that can join the
// cluster.  The name of the CRD is the FQDN of the external workload,
// and it needs to match the name in the workload registration. The
// labels on the CRD object are the labels that will be used to
// allocate a Cilium Identity for the external workload. If
// 'io.kubernetes.pod.namespace' or 'io.kubernetes.pod.name' labels
// are not explicitly specified, they will be defaulted to 'default'
// and <workload name>, respectively. 'io.cilium.k8s.policy.cluster'
// will always be defined as the name of the current cluster, which
// defaults to "default".
#CiliumExternalWorkload: {
	metav1.#TypeMeta

	// +k8s:openapi-gen=false
	// +deepequal-gen=false
	metadata: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec is the desired configuration of the external Cilium workload.
	spec?: #CiliumExternalWorkloadSpec @go(Spec)

	// Status is the most recent status of the external Cilium workload.
	// It is a read-only field.
	//
	// +deepequal-gen=false
	// +kubebuilder:validation:Optional
	status: #CiliumExternalWorkloadStatus @go(Status)
}

// CiliumExternalWorkloadSpec specifies the configurations for redirecting traffic
// within a workload.
//
// +kubebuilder:validation:Type=object
#CiliumExternalWorkloadSpec: {
	// IPv4AllocCIDR is the range of IPv4 addresses in the CIDR format that the external workload can
	// use to allocate IP addresses for the tunnel device and the health endpoint.
	//
	// +kubebuilder:validation:Pattern=`^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$`
	"ipv4-alloc-cidr"?: string @go(IPv4AllocCIDR)

	// IPv6AllocCIDR is the range of IPv6 addresses in the CIDR format that the external workload can
	// use to allocate IP addresses for the tunnel device and the health endpoint.
	//
	// +kubebuilder:validation:Pattern=`^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$`
	"ipv6-alloc-cidr"?: string @go(IPv6AllocCIDR)
}

// CiliumExternalWorkloadStatus is the status of a the external Cilium workload.
#CiliumExternalWorkloadStatus: {
	// ID is the numeric identity allocated for the external workload.
	id?: uint64 @go(ID)

	// IP is the IP address of the workload. Empty if the workload has not registered.
	ip?: string @go(IP)
}

// CiliumExternalWorkloadList is a list of CiliumExternalWorkload objects.
#CiliumExternalWorkloadList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)

	// Items is a list of CiliumExternalWorkload
	items: [...#CiliumExternalWorkload] @go(Items,[]CiliumExternalWorkload)
}
