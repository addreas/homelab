// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/pivotal/kpack/pkg/apis/build/v1alpha2

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1alpha1 "github.com/pivotal/kpack/pkg/apis/core/v1alpha1"
	corev1 "k8s.io/api/core/v1"
)

// +k8s:openapi-gen=true
#Build: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #BuildSpec         @go(Spec)
	status?:   #BuildStatus       @go(Status)
}

// +k8s:openapi-gen=true
#BuildSpec: {
	// +listType
	tags?: [...string] @go(Tags,[]string)
	builder?:        corev1alpha1.#BuildBuilderSpec @go(Builder)
	serviceAccount?: string                         @go(ServiceAccount)
	source:          corev1alpha1.#SourceConfig     @go(Source)
	cache?:          null | #BuildCacheConfig       @go(Cache,*BuildCacheConfig)

	// +listType
	bindings?: corev1alpha1.#Bindings @go(Bindings)

	// +listType
	env?: [...corev1.#EnvVar] @go(Env,[]corev1.EnvVar)
	projectDescriptorPath?: string                            @go(ProjectDescriptorPath)
	resources?:             corev1.#ResourceRequirements      @go(Resources)
	lastBuild?:             null | #LastBuild                 @go(LastBuild,*LastBuild)
	notary?:                null | corev1alpha1.#NotaryConfig @go(Notary,*corev1alpha1.NotaryConfig)
	defaultProcess?:        string                            @go(DefaultProcess)
}

// +k8s:openapi-gen=true
#BuildCacheConfig: {
	volume?:   null | #BuildPersistentVolumeCache @go(Volume,*BuildPersistentVolumeCache)
	registry?: null | #RegistryCache              @go(Registry,*RegistryCache)
}

// +k8s:openapi-gen=true
#BuildPersistentVolumeCache: {
	persistentVolumeClaimName?: string @go(ClaimName)
}

// +k8s:openapi-gen=true
#Bindings: [...#Binding]

// +k8s:openapi-gen=true
#Binding: {
	name?:        string                              @go(Name)
	metadataRef?: null | corev1.#LocalObjectReference @go(MetadataRef,*corev1.LocalObjectReference)
	secretRef?:   null | corev1.#LocalObjectReference @go(SecretRef,*corev1.LocalObjectReference)
}

// +k8s:openapi-gen=true
#LastBuild: {
	image?:   string      @go(Image)
	cache?:   #BuildCache @go(Cache)
	stackId?: string      @go(StackId)
}

// +k8s:openapi-gen=true
#BuildCache: {
	image?: string @go(Image)
}

// +k8s:openapi-gen=true
#BuildStack: {
	runImage?: string @go(RunImage)
	id?:       string @go(ID)
}

// +k8s:openapi-gen=true
#BuildStatus: {
	corev1alpha1.#Status
	buildMetadata?:    corev1alpha1.#BuildpackMetadataList @go(BuildMetadata)
	stack?:            corev1alpha1.#BuildStack            @go(Stack)
	latestImage?:      string                              @go(LatestImage)
	latestCacheImage?: string                              @go(LatestCacheImage)
	podName?:          string                              @go(PodName)

	// +listType
	stepStates?: [...corev1.#ContainerState] @go(StepStates,[]corev1.ContainerState)

	// +listType
	stepsCompleted?: [...string] @go(StepsCompleted,[]string)
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
#BuildList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)

	// +k8s:listType=atomic
	items: [...#Build] @go(Items,[]Build)
}
