// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/pivotal/kpack/pkg/apis/build/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
	corev1alpha1 "github.com/pivotal/kpack/pkg/apis/core/v1alpha1"
)

// +k8s:openapi-gen=true
#Build: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #BuildSpec         @go(Spec)
	status?:   #BuildStatus       @go(Status)
}

// +k8s:openapi-gen=true
#BuildBuilderSpec: {
	image?: string @go(Image)

	// +patchMergeKey=name
	// +patchStrategy=merge
	// +listType
	imagePullSecrets?: [...corev1.#LocalObjectReference] @go(ImagePullSecrets,[]corev1.LocalObjectReference) @protobuf(15,bytes,rep)
}

// +k8s:openapi-gen=true
#BuildSpec: {
	// +listType
	tags?: [...string] @go(Tags,[]string)
	builder?:        #BuildBuilderSpec @go(Builder)
	serviceAccount?: string            @go(ServiceAccount)
	source:          #SourceConfig     @go(Source)
	cacheName?:      string            @go(CacheName)

	// +listType
	bindings?: #Bindings @go(Bindings)

	// +listType
	env?: [...corev1.#EnvVar] @go(Env,[]corev1.EnvVar)
	resources?: corev1.#ResourceRequirements @go(Resources)
	lastBuild?: null | #LastBuild            @go(LastBuild,*LastBuild)
	notary?:    null | #NotaryConfig         @go(Notary,*NotaryConfig)
}

// +k8s:openapi-gen=true
#Bindings: [...#Binding]

// +k8s:openapi-gen=true
#Binding: {
	name:         string                              @go(Name)
	metadataRef?: null | corev1.#LocalObjectReference @go(MetadataRef,*corev1.LocalObjectReference)
	secretRef?:   null | corev1.#LocalObjectReference @go(SecretRef,*corev1.LocalObjectReference)
}

// +k8s:openapi-gen=true
#LastBuild: {
	image?:   string @go(Image)
	stackId?: string @go(StackId)
}

// +k8s:openapi-gen=true
#BuildStack: {
	runImage?: string @go(RunImage)
	id?:       string @go(ID)
}

// +k8s:openapi-gen=true
#BuildStatus: {
	corev1alpha1.#Status
	buildMetadata?: #BuildpackMetadataList @go(BuildMetadata)
	stack?:         #BuildStack            @go(Stack)
	latestImage?:   string                 @go(LatestImage)
	podName?:       string                 @go(PodName)

	// +listType
	stepStates?: [...corev1.#ContainerState] @go(StepStates,[]corev1.ContainerState)

	// +listType
	stepsCompleted?: [...string] @go(StepsCompleted,[]string)
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
#BuildList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)

	// +k8s:listType=atomic
	items: [...#Build] @go(Items,[]Build)
}
