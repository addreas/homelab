// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/pivotal/kpack/pkg/apis/build/v1alpha2

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
	corev1alpha1 "github.com/pivotal/kpack/pkg/apis/core/v1alpha1"
)

#ClusterStackKind: "ClusterStack"

// +k8s:openapi-gen=true
#ClusterStack: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta  @go(ObjectMeta)
	spec:      #ClusterStackSpec   @go(Spec)
	status:    #ClusterStackStatus @go(Status)
}

// +k8s:openapi-gen=true
#ClusterStackSpec: {
	id?:                string                         @go(Id)
	buildImage?:        #ClusterStackSpecImage         @go(BuildImage)
	runImage?:          #ClusterStackSpecImage         @go(RunImage)
	serviceAccountRef?: null | corev1.#ObjectReference @go(ServiceAccountRef,*corev1.ObjectReference)
}

// +k8s:openapi-gen=true
#ClusterStackSpecImage: {
	image?: string @go(Image)
}

// +k8s:openapi-gen=true
#ClusterStackStatus: {
	corev1alpha1.#Status

	#ResolvedClusterStack
}

// +k8s:openapi-gen=true
#ResolvedClusterStack: {
	id?:         string                   @go(Id)
	buildImage?: #ClusterStackStatusImage @go(BuildImage)
	runImage?:   #ClusterStackStatusImage @go(RunImage)

	// +listType
	mixins?: [...string] @go(Mixins,[]string)
	userId?:  int @go(UserID)
	groupId?: int @go(GroupID)
}

// +k8s:openapi-gen=true
#ClusterStackStatusImage: {
	latestImage?: string @go(LatestImage)
	image?:       string @go(Image)
}

// +k8s:openapi-gen=true
#ClusterStackList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)

	// +k8s:listType=atomic
	items: [...#ClusterStack] @go(Items,[]ClusterStack)
}
