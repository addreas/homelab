// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/pivotal/kpack/pkg/apis/build/v1alpha2

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
	corev1alpha1 "github.com/pivotal/kpack/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/resource"
)

// +k8s:openapi-gen=true
#Image: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #ImageSpec         @go(Spec)
	status?:   #ImageStatus       @go(Status)
}

// +k8s:openapi-gen=true
#ImageSpec: {
	tag:                       string                             @go(Tag)
	builder?:                  corev1.#ObjectReference            @go(Builder)
	serviceAccount?:           string                             @go(ServiceAccount)
	source:                    corev1alpha1.#SourceConfig         @go(Source)
	cache?:                    null | #ImageCacheConfig           @go(Cache,*ImageCacheConfig)
	failedBuildHistoryLimit?:  null | int64                       @go(FailedBuildHistoryLimit,*int64)
	successBuildHistoryLimit?: null | int64                       @go(SuccessBuildHistoryLimit,*int64)
	imageTaggingStrategy?:     corev1alpha1.#ImageTaggingStrategy @go(ImageTaggingStrategy)
	projectDescriptorPath?:    string                             @go(ProjectDescriptorPath)
	build?:                    null | corev1alpha1.#ImageBuild    @go(Build,*corev1alpha1.ImageBuild)
	notary?:                   null | corev1alpha1.#NotaryConfig  @go(Notary,*corev1alpha1.NotaryConfig)
	defaultProcess?:           string                             @go(DefaultProcess)
}

// +k8s:openapi-gen=true
#ImageCacheConfig: {
	volume?:   null | #ImagePersistentVolumeCache @go(Volume,*ImagePersistentVolumeCache)
	registry?: null | #RegistryCache              @go(Registry,*RegistryCache)
}

// +k8s:openapi-gen=true
#ImagePersistentVolumeCache: {
	size?: null | resource.#Quantity @go(Size,*resource.Quantity)
}

// +k8s:openapi-gen=true
#RegistryCache: {
	tag: string @go(Tag)
}

// +k8s:openapi-gen=true
#ImageBuilder: {
	metav1.#TypeMeta
	name: string @go(Name)
}

// +k8s:openapi-gen=true
#ImageStatus: {
	corev1alpha1.#Status
	latestBuildRef?:             string @go(LatestBuildRef)
	latestBuildImageGeneration?: int64  @go(LatestBuildImageGeneration)
	latestImage?:                string @go(LatestImage)
	latestStack?:                string @go(LatestStack)
	buildCounter?:               int64  @go(BuildCounter)
	buildCacheName?:             string @go(BuildCacheName)
	latestBuildReason?:          string @go(LatestBuildReason)
}

// +k8s:openapi-gen=true
#ImageList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)

	// +k8s:listType=atomic
	items: [...#Image] @go(Items,[]Image)
}

#ConditionBuilderReady: corev1alpha1.#ConditionType & "BuilderReady"
