// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/pivotal/kpack/pkg/apis/core/v1alpha1

package v1alpha1

import corev1 "k8s.io/api/core/v1"

// Conditions is the schema for the conditions portion of the payload
#Conditions: [...#Condition]

// ConditionType is a camel-cased condition type.
#ConditionType: string // #enumConditionType

#enumConditionType:
	#ConditionReady |
	#ConditionSucceeded

// ConditionReady specifies that the resource is ready.
// For long-running resources.
#ConditionReady: #ConditionType & "Ready"

// ConditionSucceeded specifies that the resource has finished.
// For resource which run to completion.
#ConditionSucceeded: #ConditionType & "Succeeded"

// ConditionSeverity expresses the severity of a Condition Type failing.
#ConditionSeverity: string // #enumConditionSeverity

#enumConditionSeverity:
	#ConditionSeverityError |
	#ConditionSeverityWarning |
	#ConditionSeverityInfo

// ConditionSeverityError specifies that a failure of a condition type
// should be viewed as an error.  As "Error" is the default for conditions
// we use the empty string (coupled with omitempty) to avoid confusion in
// the case where the condition is in state "True" (aka nothing is wrong).
#ConditionSeverityError: #ConditionSeverity & ""

// ConditionSeverityWarning specifies that a failure of a condition type
// should be viewed as a warning, but that things could still work.
#ConditionSeverityWarning: #ConditionSeverity & "Warning"

// ConditionSeverityInfo specifies that a failure of a condition type
// should be viewed as purely informational, and that things could still work.
#ConditionSeverityInfo: #ConditionSeverity & "Info"

// Conditions defines a readiness condition for a Knative resource.
// See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties
// +k8s:deepcopy-gen=true
// +k8s:openapi-gen=true
#Condition: {
	// Type of condition.
	// +required
	type: #ConditionType @go(Type)

	// Status of the condition, one of True, False, Unknown.
	// +required
	status: corev1.#ConditionStatus @go(Status)

	// Severity with which to treat failures of this type of condition.
	// When this is not specified, it defaults to Error.
	// +optional
	severity?: #ConditionSeverity @go(Severity)

	// LastTransitionTime is the last time the condition transitioned from one status to another.
	// We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic
	// differences (all other things held constant).
	// +optional
	lastTransitionTime?: #VolatileTime @go(LastTransitionTime)

	// The reason for the condition's last transition.
	// +optional
	reason?: string @go(Reason)

	// A human readable message indicating details about the transition.
	// +optional
	message?: string @go(Message)
}

// Status shows how we expect folks to embed Conditions in
// their Status field.
// WARNING: Adding fields to this struct will add them to all Knative resources.
// +k8s:deepcopy-gen=true
// +k8s:openapi-gen=true
#Status: {
	// ObservedGeneration is the 'Generation' of the Service that
	// was last processed by the controller.
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)

	// Conditions the latest available observations of a resource's current state.
	// +optional
	// +patchMergeKey=type
	// +patchStrategy=merge
	conditions?: #Conditions @go(Conditions)
}
