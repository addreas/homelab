// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana-operator/grafana-operator/v4/api/integreatly/v1alpha1

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GrafanaDashboardSpec defines the desired state of GrafanaDashboard
#GrafanaDashboardSpec: {
	// Json is the dashboard's JSON
	json?: string @go(Json)

	// GzipJson the dashboard's JSON compressed with Gzip. Base64-encoded when in YAML.
	gzipJson?: bytes       @go(GzipJson,[]byte)
	jsonnet?:  string      @go(Jsonnet)
	plugins?:  #PluginList @go(Plugins)
	url?:      string      @go(Url)

	// ConfigMapRef is a reference to a ConfigMap data field containing the dashboard's JSON
	configMapRef?: null | corev1.#ConfigMapKeySelector @go(ConfigMapRef,*corev1.ConfigMapKeySelector)

	// GzipConfigMapRef is a reference to a ConfigMap binaryData field containing
	// the dashboard's JSON, compressed with Gzip.
	gzipConfigMapRef?: null | corev1.#ConfigMapKeySelector @go(GzipConfigMapRef,*corev1.ConfigMapKeySelector)
	datasources?: [...#GrafanaDashboardDatasource] @go(Datasources,[]GrafanaDashboardDatasource)
	customFolderName?: string                                   @go(CustomFolderName)
	grafanaCom?:       null | #GrafanaDashboardGrafanaComSource @go(GrafanaCom,*GrafanaDashboardGrafanaComSource)

	// ContentCacheDuration sets how often the operator should resync with the external source when using
	// the `grafanaCom.id` or `url` field to specify the source of the dashboard. The default value is
	// decided by the `dashboardContentCacheDuration` field in the `Grafana` resource. The default is 0 which
	// is interpreted as never refetching.
	contentCacheDuration?: null | metav1.#Duration @go(ContentCacheDuration,*metav1.Duration)
}

#GrafanaDashboardDatasource: {
	inputName:      string @go(InputName)
	datasourceName: string @go(DatasourceName)
}

#GrafanaDashboardGrafanaComSource: {
	id:        int        @go(Id)
	revision?: null | int @go(Revision,*int)
}

// GrafanaDashboardRef is used to keep a dashboard reference without having access to the dashboard
// struct itself
#GrafanaDashboardRef: {
	name:       string       @go(Name)
	namespace:  string       @go(Namespace)
	uid:        string       @go(UID)
	hash:       string       @go(Hash)
	folderId?:  null | int64 @go(FolderId,*int64)
	folderName: string       @go(FolderName)
}

#GrafanaDashboardStatus: {
	contentCache?:     bytes                         @go(ContentCache,[]byte)
	contentTimestamp?: metav1.#Time                  @go(ContentTimestamp)
	contentUrl?:       string                        @go(ContentUrl)
	error?:            null | #GrafanaDashboardError @go(Error,*GrafanaDashboardError)
}

#GrafanaDashboardError: {
	code:     int    @go(Code)
	error:    string @go(Message)
	retries?: int    @go(Retries)
}

// GrafanaDashboard is the Schema for the grafanadashboards API
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
#GrafanaDashboard: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta      @go(ObjectMeta)
	spec?:     #GrafanaDashboardSpec   @go(Spec)
	status?:   #GrafanaDashboardStatus @go(Status)
}

// GrafanaDashboardList contains a list of GrafanaDashboard
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
#GrafanaDashboardList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GrafanaDashboard] @go(Items,[]GrafanaDashboard)
}
