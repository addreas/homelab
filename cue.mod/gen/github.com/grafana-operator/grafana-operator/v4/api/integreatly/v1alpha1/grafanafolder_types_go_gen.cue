// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana-operator/grafana-operator/v4/api/integreatly/v1alpha1

package v1alpha1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

#GrafanaPermissionItem: {
	permissionTargetType: string @go(PermissionTargetType)
	permissionTarget:     string @go(PermissionTarget)
	permissionLevel:      int    @go(PermissionLevel)
}

#GrafanaFolderSpec: {
	// FolderName is the display-name of the folder and must match CustomFolderName of any GrafanaDashboard you want to put in
	title: string @go(FolderName)

	// FolderPermissions shall contain the _complete_ permissions for the folder.
	// Any permission not listed here, will be removed from the folder.
	permissions?: [...#GrafanaPermissionItem] @go(FolderPermissions,[]GrafanaPermissionItem)
}

// GrafanaFolder is the Schema for the grafana folders and folderpermissions API
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
#GrafanaFolder: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #GrafanaFolderSpec @go(Spec)
}

// GrafanaFolderList contains a list of GrafanaFolder
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
#GrafanaFolderList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GrafanaFolder] @go(Items,[]GrafanaFolder)
}

// GrafanaFolderRef is used to keep a folder reference without having access to the folder-struct itself
#GrafanaFolderRef: {
	name:      string @go(Name)
	namespace: string @go(Namespace)
	hash:      string @go(Hash)
}
