// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana-operator/grafana-operator/v4/api/integreatly/v1alpha1

package v1alpha1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// GrafanaDataSourceSpec defines the desired state of GrafanaDataSource
#GrafanaDataSourceSpec: {
	datasources: [...#GrafanaDataSourceFields] @go(Datasources,[]GrafanaDataSourceFields)
	name: string @go(Name)
}

#GrafanaDataSourceStatus: {
	phase:   #StatusPhase @go(Phase)
	message: string       @go(Message)
}

// GrafanaDataSource is the Schema for the grafanadatasources API
#GrafanaDataSource: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta       @go(ObjectMeta)
	spec?:     #GrafanaDataSourceSpec   @go(Spec)
	status?:   #GrafanaDataSourceStatus @go(Status)
}

// GrafanaDataSourceList contains a list of GrafanaDataSource
// +kubebuilder:object:root=true
#GrafanaDataSourceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GrafanaDataSource] @go(Items,[]GrafanaDataSource)
}

#GrafanaDataSourceFields: {
	name:               string                           @go(Name)
	type:               string                           @go(Type)
	uid?:               string                           @go(Uid)
	access?:            string                           @go(Access)
	orgId?:             int                              @go(OrgId)
	url?:               string                           @go(Url)
	password?:          string                           @go(Password)
	user?:              string                           @go(User)
	database?:          string                           @go(Database)
	basicAuth?:         bool                             @go(BasicAuth)
	basicAuthUser?:     string                           @go(BasicAuthUser)
	basicAuthPassword?: string                           @go(BasicAuthPassword)
	withCredentials?:   bool                             @go(WithCredentials)
	isDefault?:         bool                             @go(IsDefault)
	jsonData?:          #GrafanaDataSourceJsonData       @go(JsonData)
	secureJsonData?:    #GrafanaDataSourceSecureJsonData @go(SecureJsonData)
	version?:           int                              @go(Version)
	editable?:          bool                             @go(Editable)
}

// The most common json options
// See https://grafana.com/docs/administration/provisioning/#datasources
#GrafanaDataSourceJsonData: {
	oauthPassThru?:           bool   @go(OauthPassThru)
	tlsAuth?:                 bool   @go(TlsAuth)
	tlsAuthWithCACert?:       bool   @go(TlsAuthWithCACert)
	tlsSkipVerify?:           bool   @go(TlsSkipVerify)
	graphiteVersion?:         string @go(GraphiteVersion)
	timeInterval?:            string @go(TimeInterval)
	esVersion?:               int    @go(EsVersion)
	timeField?:               string @go(TimeField)
	interval?:                string @go(Interval)
	logMessageField?:         string @go(LogMessageField)
	logLevelField?:           string @go(LogLevelField)
	authType?:                string @go(AuthType)
	assumeRoleArn?:           string @go(AssumeRoleArn)
	defaultRegion?:           string @go(DefaultRegion)
	customMetricsNamespaces?: string @go(CustomMetricsNamespaces)
	tsdbVersion?:             string @go(TsdbVersion)
	tsdbResolution?:          string @go(TsdbResolution)
	sslmode?:                 string @go(Sslmode)
	encrypt?:                 string @go(Encrypt)
	postgresVersion?:         int    @go(PostgresVersion)
	timescaledb?:             bool   @go(Timescaledb)
	maxOpenConns?:            int    @go(MaxOpenConns)
	maxIdleConns?:            int    @go(MaxIdleConns)
	connMaxLifetime?:         int    @go(ConnMaxLifetime)

	//  Useful fields for clickhouse datasource
	//  See https://github.com/Vertamedia/clickhouse-grafana/tree/master/dist/README.md#configure-the-datasource-with-provisioning
	//  See https://github.com/Vertamedia/clickhouse-grafana/tree/master/src/datasource.ts#L44
	addCorsHeader?:               bool   @go(AddCorsHeader)
	defaultDatabase?:             string @go(DefaultDatabase)
	usePOST?:                     bool   @go(UsePOST)
	useYandexCloudAuthorization?: bool   @go(UseYandexCloudAuthorization)
	xHeaderUser?:                 string @go(XHeaderUser)
	xHeaderKey?:                  string @go(XHeaderKey)

	// Custom HTTP headers for datasources
	// See https://grafana.com/docs/grafana/latest/administration/provisioning/#datasources
	httpHeaderName1?: string @go(HTTPHeaderName1)
	httpHeaderName2?: string @go(HTTPHeaderName2)
	httpHeaderName3?: string @go(HTTPHeaderName3)
	httpHeaderName4?: string @go(HTTPHeaderName4)
	httpHeaderName5?: string @go(HTTPHeaderName5)
	httpHeaderName6?: string @go(HTTPHeaderName6)
	httpHeaderName7?: string @go(HTTPHeaderName7)
	httpHeaderName8?: string @go(HTTPHeaderName8)
	httpHeaderName9?: string @go(HTTPHeaderName9)

	// Fields for Stackdriver data sources
	tokenUri?:           string @go(TokenUri)
	clientEmail?:        string @go(ClientEmail)
	authenticationType?: string @go(AuthenticationType)
	defaultProject?:     string @go(DefaultProject)

	// Fields for Azure data sources
	appInsightsAppId?:             string @go(AppInsightsAppId)
	azureLogAnalyticsSameAs?:      string @go(AzureLogAnalyticsSameAs)
	clientId?:                     string @go(ClientId)
	clusterUrl?:                   string @go(ClusterURL)
	cloudName?:                    string @go(CloudName)
	logAnalyticsDefaultWorkspace?: string @go(LogAnalyticsDefaultWorkspace)
	logAnalyticsClientId?:         string @go(LogAnalyticsClientId)
	logAnalyticsSubscriptionId?:   string @go(LogAnalyticsSubscriptionId)
	logAnalyticsTenantId?:         string @go(LogAnalyticsTenantId)
	subscriptionId?:               string @go(SubscriptionId)
	tenantId?:                     string @go(TenantId)

	// Fields for InfluxDB data sources
	httpMode?:      string @go(HTTPMode)
	version?:       string @go(Version)
	organization?:  string @go(Organization)
	defaultBucket?: string @go(DefaultBucket)

	// Fields for Loki data sources
	maxLines?: int @go(MaxLines)
	derivedFields?: [...#GrafanaDataSourceJsonDerivedFields] @go(DerivedFields,[]GrafanaDataSourceJsonDerivedFields)

	// Fields for Prometheus data sources
	customQueryParameters?: string @go(CustomQueryParameters)
	httpMethod?:            string @go(HTTPMethod)

	// Fields for tracing data sources
	tracesToLogs?: #GrafanaDataSourceJsonTracesToLogs @go(TracesToLogs)
}

#GrafanaDataSourceJsonDerivedFields: {
	datasourceUid?: string @go(DatasourceUid)
	matcherRegex?:  string @go(MatcherRegex)
	name?:          string @go(Name)
	url?:           string @go(Url)
}

#GrafanaDataSourceJsonTracesToLogs: {
	datasourceUid?:      string @go(DatasourceUid)
	spanEndTimeShift?:   string @go(SpanEndTimeShift)
	spanStartTimeShift?: string @go(SpanStartTimeShift)
	tags?: [...string] @go(Tags,[]string)
}

// The most common secure json options
// See https://grafana.com/docs/administration/provisioning/#datasources
#GrafanaDataSourceSecureJsonData: {
	tlsCACert?:         string @go(TlsCaCert)
	tlsClientCert?:     string @go(TlsClientCert)
	tlsClientKey?:      string @go(TlsClientKey)
	password?:          string @go(Password)
	basicAuthPassword?: string @go(BasicAuthPassword)
	accessKey?:         string @go(AccessKey)
	secretKey?:         string @go(SecretKey)

	// Custom HTTP headers for datasources
	// See https://grafana.com/docs/grafana/latest/administration/provisioning/#datasources
	httpHeaderValue1?: string @go(HTTPHeaderValue1)
	httpHeaderValue2?: string @go(HTTPHeaderValue2)
	httpHeaderValue3?: string @go(HTTPHeaderValue3)
	httpHeaderValue4?: string @go(HTTPHeaderValue4)
	httpHeaderValue5?: string @go(HTTPHeaderValue5)
	httpHeaderValue6?: string @go(HTTPHeaderValue6)
	httpHeaderValue7?: string @go(HTTPHeaderValue7)
	httpHeaderValue8?: string @go(HTTPHeaderValue8)
	httpHeaderValue9?: string @go(HTTPHeaderValue9)

	// Fields for Stackdriver data sources
	privateKey?: string @go(PrivateKey)

	// Fields for Azure data sources
	clientSecret?:             string @go(ClientSecret)
	appInsightsApiKey?:        string @go(AppInsightsApiKey)
	logAnalyticsClientSecret?: string @go(LogAnalyticsClientSecret)

	// Fields for InfluxDB data sources
	token?: string @go(Token)
}
