// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana-operator/grafana-operator/v5/api/v1beta1

package v1beta1

import (
	"k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#OperatorStageName: string // #enumOperatorStageName

#enumOperatorStageName:
	#OperatorStageGrafanaConfig |
	#OperatorStageAdminUser |
	#OperatorStagePvc |
	#OperatorStageServiceAccount |
	#OperatorStageService |
	#OperatorStageIngress |
	#OperatorStagePlugins |
	#OperatorStageDeployment |
	#OperatorStageComplete

#OperatorStageStatus: string // #enumOperatorStageStatus

#enumOperatorStageStatus:
	#OperatorStageResultSuccess |
	#OperatorStageResultFailed |
	#OperatorStageResultInProgress

#OperatorStageGrafanaConfig:  #OperatorStageName & "config"
#OperatorStageAdminUser:      #OperatorStageName & "admin user"
#OperatorStagePvc:            #OperatorStageName & "pvc"
#OperatorStageServiceAccount: #OperatorStageName & "service account"
#OperatorStageService:        #OperatorStageName & "service"
#OperatorStageIngress:        #OperatorStageName & "ingress"
#OperatorStagePlugins:        #OperatorStageName & "plugins"
#OperatorStageDeployment:     #OperatorStageName & "deployment"
#OperatorStageComplete:       #OperatorStageName & "complete"

#OperatorStageResultSuccess:    #OperatorStageStatus & "success"
#OperatorStageResultFailed:     #OperatorStageStatus & "failed"
#OperatorStageResultInProgress: #OperatorStageStatus & "in progress"

// temporary values passed between reconciler stages
#OperatorReconcileVars: {
	// used to restart the Grafana container when the config changes
	ConfigHash: string

	// env var value for installed plugins
	Plugins: string
}

// GrafanaSpec defines the desired state of Grafana
#GrafanaSpec: {
	// +kubebuilder:pruning:PreserveUnknownFields
	// Config defines how your grafana ini file should looks like.
	config?: {[string]: [string]: string} @go(Config,map[string]map[string]string)

	// Ingress sets how the ingress object should look like with your grafana instance.
	ingress?: null | #IngressNetworkingV1 @go(Ingress,*IngressNetworkingV1)

	// Route sets how the ingress object should look like with your grafana instance, this only works in Openshift.
	route?: null | #RouteOpenshiftV1 @go(Route,*RouteOpenshiftV1)

	// Service sets how the service object should look like with your grafana instance, contains a number of defaults.
	service?: null | #ServiceV1 @go(Service,*ServiceV1)

	// Deployment sets how the deployment object should look like with your grafana instance, contains a number of defaults.
	deployment?: null | #DeploymentV1 @go(Deployment,*DeploymentV1)

	// PersistentVolumeClaim creates a PVC if you need to attach one to your grafana instance.
	persistentVolumeClaim?: null | #PersistentVolumeClaimV1 @go(PersistentVolumeClaim,*PersistentVolumeClaimV1)

	// ServiceAccount sets how the ServiceAccount object should look like with your grafana instance, contains a number of defaults.
	serviceAccount?: null | #ServiceAccountV1 @go(ServiceAccount,*ServiceAccountV1)

	// Client defines how the grafana-operator talks to the grafana instance.
	client?:  null | #GrafanaClient @go(Client,*GrafanaClient)
	jsonnet?: null | #JsonnetConfig @go(Jsonnet,*JsonnetConfig)

	// External enables you to configure external grafana instances that is not managed by the operator.
	external?: null | #External @go(External,*External)
}

#External: {
	// URL of the external grafana instance you want to manage.
	url: string @go(URL)

	// The API key to talk to the external grafana instance, you need to define ether apiKey or adminUser/adminPassword.
	apiKey?: null | v1.#SecretKeySelector @go(ApiKey,*v1.SecretKeySelector)

	// AdminUser key to talk to the external grafana instance.
	adminUser?: null | v1.#SecretKeySelector @go(AdminUser,*v1.SecretKeySelector)

	// AdminPassword key to talk to the external grafana instance.
	adminPassword?: null | v1.#SecretKeySelector @go(AdminPassword,*v1.SecretKeySelector)
}

#JsonnetConfig: {
	libraryLabelSelector?: null | metav1.#LabelSelector @go(LibraryLabelSelector,*metav1.LabelSelector)
}

// GrafanaClient contains the Grafana API client settings
#GrafanaClient: {
	// +nullable
	timeout?: null | int @go(TimeoutSeconds,*int)

	// +nullable
	// If the operator should send it's request through the grafana instances ingress object instead of through the service.
	preferIngress?: null | bool @go(PreferIngress,*bool)
}

// GrafanaStatus defines the observed state of Grafana
#GrafanaStatus: {
	stage?:       #OperatorStageName      @go(Stage)
	stageStatus?: #OperatorStageStatus    @go(StageStatus)
	lastMessage?: string                  @go(LastMessage)
	adminUrl?:    string                  @go(AdminUrl)
	dashboards?:  #NamespacedResourceList @go(Dashboards)
	datasources?: #NamespacedResourceList @go(Datasources)
	folders?:     #NamespacedResourceList @go(Folders)
}

// Grafana is the Schema for the grafanas API
#Grafana: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #GrafanaSpec       @go(Spec)
	status?:   #GrafanaStatus     @go(Status)
}

// GrafanaList contains a list of Grafana
#GrafanaList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Grafana] @go(Items,[]Grafana)
}
