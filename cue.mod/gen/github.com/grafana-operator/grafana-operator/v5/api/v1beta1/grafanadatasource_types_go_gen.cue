// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana-operator/grafana-operator/v5/api/v1beta1

package v1beta1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

#GrafanaDatasourceDataSource: {
	id?:            int64  @go(ID)
	uid?:           string @go(UID)
	name:           string @go(Name)
	type:           string @go(Type)
	url:            string @go(URL)
	access:         string @go(Access)
	database?:      string @go(Database)
	user?:          string @go(User)
	orgId?:         int64  @go(OrgID)
	isDefault:      bool   @go(IsDefault)
	basicAuth:      bool   @go(BasicAuth)
	basicAuthUser?: string @go(BasicAuthUser)

	// +kubebuilder:validation:Schemaless
	// +kubebuilder:pruning:PreserveUnknownFields
	// +kubebuilder:validation:Type=object
	// +optional
	jsonData?: _ @go(JSONData,json.RawMessage)

	// +kubebuilder:validation:Schemaless
	// +kubebuilder:pruning:PreserveUnknownFields
	// +kubebuilder:validation:Type=object
	// +optional
	secureJsonData?: _ @go(SecureJSONData,json.RawMessage)
}

// GrafanaDatasourceSpec defines the desired state of GrafanaDatasource
#GrafanaDatasourceSpec: {
	datasource?: #GrafanaDatasourceDataSource @go(DataSource)

	// selects Grafana instances
	instanceSelector?: null | metav1.#LabelSelector @go(InstanceSelector,*metav1.LabelSelector)

	// plugins
	// +optional
	plugins?: #PluginList @go(Plugins)

	// secrets used for variable expansion
	// +optional
	secrets?: [...string] @go(Secrets,[]string)

	// how often the datasource is refreshed
	interval: metav1.#Duration @go(Interval)

	// allow to import this resources from an operator in a different namespace
	// +optional
	allowCrossNamespaceImport?: null | bool @go(AllowCrossNamespaceReferences,*bool)
}

// GrafanaDatasourceStatus defines the observed state of GrafanaDatasource
#GrafanaDatasourceStatus: {
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)

	// Instances stores UID, version, and folder info for each instance the datasource has been created in
	// +optional
	instances?: {[string]: #GrafanaDatasourceInstanceStatus} @go(Instances,map[string]GrafanaDatasourceInstanceStatus)
}

#GrafanaDatasourceInstanceStatus: {
	ID?:  int64
	UID?: string
}

// GrafanaDatasource is the Schema for the grafanadatasources API
#GrafanaDatasource: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta       @go(ObjectMeta)
	spec?:     #GrafanaDatasourceSpec   @go(Spec)
	status?:   #GrafanaDatasourceStatus @go(Status)
}

// GrafanaDatasourceList contains a list of GrafanaDatasource
#GrafanaDatasourceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GrafanaDatasource] @go(Items,[]GrafanaDatasource)
}
