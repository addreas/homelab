// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana-operator/grafana-operator/v5/api/v1beta1

package v1beta1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

#GrafanaDatasourceInternal: {
	uid?:           string       @go(UID)
	name?:          string       @go(Name)
	type?:          string       @go(Type)
	url?:           string       @go(URL)
	access?:        string       @go(Access)
	database?:      string       @go(Database)
	user?:          string       @go(User)
	orgId?:         null | int64 @go(OrgID,*int64)
	isDefault?:     null | bool  @go(IsDefault,*bool)
	basicAuth?:     null | bool  @go(BasicAuth,*bool)
	basicAuthUser?: string       @go(BasicAuthUser)
	editable?:      null | bool  @go(Editable,*bool)

	// +kubebuilder:validation:Schemaless
	// +kubebuilder:pruning:PreserveUnknownFields
	// +kubebuilder:validation:Type=object
	// +optional
	jsonData?: _ @go(JSONData,json.RawMessage)

	// +kubebuilder:validation:Schemaless
	// +kubebuilder:pruning:PreserveUnknownFields
	// +kubebuilder:validation:Type=object
	// +optional
	secureJsonData?: _ @go(SecureJSONData,json.RawMessage)
}

// GrafanaDatasourceSpec defines the desired state of GrafanaDatasource
#GrafanaDatasourceSpec: {
	datasource?: null | #GrafanaDatasourceInternal @go(Datasource,*GrafanaDatasourceInternal)

	// selects Grafana instances for import
	instanceSelector?: null | metav1.#LabelSelector @go(InstanceSelector,*metav1.LabelSelector)

	// plugins
	// +optional
	plugins?: #PluginList @go(Plugins)

	// secrets used for variable expansion
	// +optional
	secrets?: [...string] @go(Secrets,[]string)

	// how often the datasource is refreshed, defaults to 24h if not set
	// +optional
	resyncPeriod?: string @go(ResyncPeriod)

	// allow to import this resources from an operator in a different namespace
	// +optional
	allowCrossNamespaceImport?: null | bool @go(AllowCrossNamespaceImport,*bool)
}

// GrafanaDatasourceStatus defines the observed state of GrafanaDatasource
#GrafanaDatasourceStatus: {
	hash?:        string @go(Hash)
	lastMessage?: string @go(LastMessage)

	// The datasource instanceSelector can't find matching grafana instances
	NoMatchingInstances?: bool
}

// GrafanaDatasource is the Schema for the grafanadatasources API
#GrafanaDatasource: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta       @go(ObjectMeta)
	spec?:     #GrafanaDatasourceSpec   @go(Spec)
	status?:   #GrafanaDatasourceStatus @go(Status)
}

// GrafanaDatasourceList contains a list of GrafanaDatasource
#GrafanaDatasourceList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GrafanaDatasource] @go(Items,[]GrafanaDatasource)
}
