// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana-operator/grafana-operator/v5/api/v1beta1

package v1beta1

import (
	"k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#GrafanaDashboardDatasource: {
	inputName:     string              @go(InputName)
	datasourceRef: v1.#ObjectReference @go(DatasourceRef)
}

// GrafanaDashboardSpec defines the desired state of GrafanaDashboard
#GrafanaDashboardSpec: {
	source: #GrafanaDashboardSource @go(Source)

	// selects Grafanas for import
	// +optional
	instanceSelector?: null | metav1.#LabelSelector @go(InstanceSelector,*metav1.LabelSelector)

	// folder assignment for dashboard
	// +optional
	folder?: string @go(FolderTitle)

	// plugins
	// +optional
	plugins?: #PluginList @go(Plugins)

	// how often the dashboard is endured to exist on the selected instances, defaults to 24h if not set
	interval: metav1.#Duration @go(Interval)

	// maps required data sources to existing ones
	// +optional
	datasources?: [...#GrafanaDashboardDatasource] @go(Datasources,[]GrafanaDashboardDatasource)

	// allow to import this resources from an operator in a different namespace
	// +optional
	allowCrossNamespaceReferences?: null | bool @go(AllowCrossNamespaceReferences,*bool)
}

// +kubebuilder:validation:MinProperties:=1
// +kubebuilder:validation:MaxProperties:=1
#GrafanaDashboardSource: {
	inline?:    null | #GrafanaDashboardInlineSource @go(Inline,*GrafanaDashboardInlineSource)
	remote?:    null | #GrafanaDashboardRemoteSource @go(Remote,*GrafanaDashboardRemoteSource)
	configMap?: null | v1.#ConfigMapKeySelector      @go(ConfigMap,*v1.ConfigMapKeySelector)
}

// +kubebuilder:validation:MinProperties:=1
// +kubebuilder:validation:MaxProperties:=1
#GrafanaDashboardInlineSource: {
	// dashboard json
	// +optional
	json?: null | string @go(Json,*string)

	// GzipJson the dashboard's JSON compressed with Gzip. Base64-encoded when in YAML.
	// +optional
	gzipJson?: bytes @go(GzipJson,[]byte)

	// Jsonnet
	// +optional
	jsonnet?: null | string @go(Jsonnet,*string)
}

// +kubebuilder:validation:MinProperties:=2
// +kubebuilder:validation:MaxProperties:=2
#GrafanaDashboardRemoteSource: {
	// Cache duration for dashboards fetched from URLs
	contentCacheDuration: metav1.#Duration @go(ContentCacheDuration)

	// dashboard url
	// +optional
	url?: null | string @go(Url,*string)

	// grafana.com/dashboards
	// +optional
	grafanaCom?: null | #GrafanaComDashboardReference @go(GrafanaCom,*GrafanaComDashboardReference)
}

// GrafanaComDashbooardReference is a reference to a dashboard on grafana.com/dashboards
#GrafanaComDashboardReference: {
	id: int @go(Id)

	// +optional
	revision?: null | int @go(Revision,*int)
}

// GrafanaDashboardStatus defines the observed state of GrafanaDashboard
#GrafanaDashboardStatus: {
	// Content contains information about fetched remote content
	// +optional
	content?:      null | #GrafanaDashboardStatusContent      @go(Content,*GrafanaDashboardStatusContent)
	contentError?: null | #GrafanaDashboardStatusContentError @go(ContentError,*GrafanaDashboardStatusContentError)

	// Instances stores UID, version, and folder info for each instance the dashboard has been created in
	// +optional
	instances?: {[string]: #GrafanaDashboardInstanceStatus} @go(Instances,map[string]GrafanaDashboardInstanceStatus)

	// +optional
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)
}

#GrafanaDashboardStatusContent: {
	cache?:     bytes        @go(Cache,[]byte)
	timestamp?: metav1.#Time @go(Timestamp)
	url:        string       @go(Url)
}

#GrafanaDashboardStatusContentError: {
	message:   string       @go(Message)
	timestamp: metav1.#Time @go(Timestamp)
	attempts:  int          @go(Attempts)
}

#GrafanaDashboardInstanceStatus: {
	Version?: int64
	UID?:     string
}

// GrafanaDashboard is the Schema for the grafanadashboards API
#GrafanaDashboard: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta      @go(ObjectMeta)
	spec?:     #GrafanaDashboardSpec   @go(Spec)
	status?:   #GrafanaDashboardStatus @go(Status)
}

// GrafanaDashboardList contains a list of GrafanaDashboard
#GrafanaDashboardList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GrafanaDashboard] @go(Items,[]GrafanaDashboard)
}
