// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana-operator/grafana-operator/v5/api/v1beta1

package v1beta1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

#DashboardSourceType: string // #enumDashboardSourceType

#enumDashboardSourceType:
	#DashboardSourceTypeRawJson |
	#DashboardSourceTypeGzipJson |
	#DashboardSourceTypeUrl |
	#DashboardSourceTypeJsonnet |
	#DashboardSourceTypeGrafanaCom

#DashboardSourceTypeRawJson:    #DashboardSourceType & "json"
#DashboardSourceTypeGzipJson:   #DashboardSourceType & "gzipJson"
#DashboardSourceTypeUrl:        #DashboardSourceType & "url"
#DashboardSourceTypeJsonnet:    #DashboardSourceType & "jsonnet"
#DashboardSourceTypeGrafanaCom: #DashboardSourceType & "grafana"
#DefaultResyncPeriod:           "5m"

#GrafanaDashboardDatasource: {
	inputName:      string @go(InputName)
	datasourceName: string @go(DatasourceName)
}

// GrafanaDashboardSpec defines the desired state of GrafanaDashboard
#GrafanaDashboardSpec: {
	// dashboard json
	// +optional
	json?: string @go(Json)

	// GzipJson the dashboard's JSON compressed with Gzip. Base64-encoded when in YAML.
	// +optional
	gzipJson?: bytes @go(GzipJson,[]byte)

	// dashboard url
	// +optional
	url?: string @go(Url)

	// Jsonnet
	// +optional
	jsonnet?: string @go(Jsonnet)

	// grafana.com/dashboards
	// +optional
	grafanaCom?: null | #GrafanaComDashboardReference @go(GrafanaCom,*GrafanaComDashboardReference)

	// selects Grafanas for import
	instanceSelector?: null | metav1.#LabelSelector @go(InstanceSelector,*metav1.LabelSelector)

	// folder assignment for dashboard
	// +optional
	folder?: string @go(FolderTitle)

	// plugins
	// +optional
	plugins?: #PluginList @go(Plugins)

	// Cache duration for dashboards fetched from URLs
	// +optional
	contentCacheDuration?: metav1.#Duration @go(ContentCacheDuration)

	// how often the dashboard is refreshed, defaults to 24h if not set
	// +optional
	resyncPeriod?: string @go(ResyncPeriod)

	// maps required data sources to existing ones
	// +optional
	datasources?: [...#GrafanaDashboardDatasource] @go(Datasources,[]GrafanaDashboardDatasource)

	// allow to import this resources from an operator in a different namespace
	// +optional
	allowCrossNamespaceImport?: null | bool @go(AllowCrossNamespaceImport,*bool)
}

// GrafanaComDashbooardReference is a reference to a dashboard on grafana.com/dashboards
#GrafanaComDashboardReference: {
	id:        int        @go(Id)
	revision?: null | int @go(Revision,*int)
}

// GrafanaDashboardStatus defines the observed state of GrafanaDashboard
#GrafanaDashboardStatus: {
	contentCache?:     bytes        @go(ContentCache,[]byte)
	contentTimestamp?: metav1.#Time @go(ContentTimestamp)
	contentUrl?:       string       @go(ContentUrl)
	hash?:             string       @go(Hash)

	// The dashboard instanceSelector can't find matching grafana instances
	NoMatchingInstances?: bool
}

// GrafanaDashboard is the Schema for the grafanadashboards API
#GrafanaDashboard: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta      @go(ObjectMeta)
	spec?:     #GrafanaDashboardSpec   @go(Spec)
	status?:   #GrafanaDashboardStatus @go(Status)
}

// GrafanaDashboardList contains a list of GrafanaDashboard
#GrafanaDashboardList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#GrafanaDashboard] @go(Items,[]GrafanaDashboard)
}
