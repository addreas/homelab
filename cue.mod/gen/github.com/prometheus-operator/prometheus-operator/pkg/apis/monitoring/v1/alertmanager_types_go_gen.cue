// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/api/core/v1"
	appsv1 "k8s.io/api/apps/v1"
)

#AlertmanagersKind:   "Alertmanager"
#AlertmanagerName:    "alertmanagers"
#AlertManagerKindKey: "alertmanager"

// The `Alertmanager` custom resource definition (CRD) defines a desired [Alertmanager](https://prometheus.io/docs/alerting) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage and many more.
//
// For each `Alertmanager` resource, the Operator deploys a `StatefulSet` in the same namespace. When there are two or more configured replicas, the Operator runs the Alertmanager instances in high-availability mode.
//
// The resource defines via label and namespace selectors which `AlertmanagerConfig` objects should be associated to the deployed Alertmanager instances.
#Alertmanager: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Specification of the desired behavior of the Alertmanager cluster. More info:
	// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	spec: #AlertmanagerSpec @go(Spec)

	// Most recent observed status of the Alertmanager cluster. Read-only.
	// More info:
	// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	status?: #AlertmanagerStatus @go(Status)
}

// AlertmanagerSpec is a specification of the desired behavior of the Alertmanager cluster. More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
// +k8s:openapi-gen=true
#AlertmanagerSpec: {
	// PodMetadata configures labels and annotations which are propagated to the Alertmanager pods.
	//
	// The following items are reserved and cannot be overridden:
	// * "alertmanager" label, set to the name of the Alertmanager instance.
	// * "app.kubernetes.io/instance" label, set to the name of the Alertmanager instance.
	// * "app.kubernetes.io/managed-by" label, set to "prometheus-operator".
	// * "app.kubernetes.io/name" label, set to "alertmanager".
	// * "app.kubernetes.io/version" label, set to the Alertmanager version.
	// * "kubectl.kubernetes.io/default-container" annotation, set to "alertmanager".
	podMetadata?: null | #EmbeddedObjectMetadata @go(PodMetadata,*EmbeddedObjectMetadata)

	// Image if specified has precedence over baseImage, tag and sha
	// combinations. Specifying the version is still necessary to ensure the
	// Prometheus Operator knows what version of Alertmanager is being
	// configured.
	image?: null | string @go(Image,*string)

	// Image pull policy for the 'alertmanager', 'init-config-reloader' and 'config-reloader' containers.
	// See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.
	// +kubebuilder:validation:Enum="";Always;Never;IfNotPresent
	imagePullPolicy?: v1.#PullPolicy @go(ImagePullPolicy)

	// Version the cluster should be on.
	version?: string @go(Version)

	// Tag of Alertmanager container image to be deployed. Defaults to the value of `version`.
	// Version is ignored if Tag is set.
	// Deprecated: use 'image' instead. The image tag can be specified as part of the image URL.
	tag?: string @go(Tag)

	// SHA of Alertmanager container image to be deployed. Defaults to the value of `version`.
	// Similar to a tag, but the SHA explicitly deploys an immutable container image.
	// Version and Tag are ignored if SHA is set.
	// Deprecated: use 'image' instead. The image digest can be specified as part of the image URL.
	sha?: string @go(SHA)

	// Base image that is used to deploy pods, without tag.
	// Deprecated: use 'image' instead.
	baseImage?: string @go(BaseImage)

	// An optional list of references to secrets in the same namespace
	// to use for pulling prometheus and alertmanager images from registries
	// see https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
	imagePullSecrets?: [...v1.#LocalObjectReference] @go(ImagePullSecrets,[]v1.LocalObjectReference)

	// Secrets is a list of Secrets in the same namespace as the Alertmanager
	// object, which shall be mounted into the Alertmanager Pods.
	// Each Secret is added to the StatefulSet definition as a volume named `secret-<secret-name>`.
	// The Secrets are mounted into `/etc/alertmanager/secrets/<secret-name>` in the 'alertmanager' container.
	secrets?: [...string] @go(Secrets,[]string)

	// ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager
	// object, which shall be mounted into the Alertmanager Pods.
	// Each ConfigMap is added to the StatefulSet definition as a volume named `configmap-<configmap-name>`.
	// The ConfigMaps are mounted into `/etc/alertmanager/configmaps/<configmap-name>` in the 'alertmanager' container.
	configMaps?: [...string] @go(ConfigMaps,[]string)

	// ConfigSecret is the name of a Kubernetes Secret in the same namespace as the
	// Alertmanager object, which contains the configuration for this Alertmanager
	// instance. If empty, it defaults to `alertmanager-<alertmanager-name>`.
	//
	// The Alertmanager configuration should be available under the
	// `alertmanager.yaml` key. Additional keys from the original secret are
	// copied to the generated secret and mounted into the
	// `/etc/alertmanager/config` directory in the `alertmanager` container.
	//
	// If either the secret or the `alertmanager.yaml` key is missing, the
	// operator provisions a minimal Alertmanager configuration with one empty
	// receiver (effectively dropping alert notifications).
	configSecret?: string @go(ConfigSecret)

	// Log level for Alertmanager to be configured with.
	// +kubebuilder:validation:Enum="";debug;info;warn;error
	logLevel?: string @go(LogLevel)

	// Log format for Alertmanager to be configured with.
	// +kubebuilder:validation:Enum="";logfmt;json
	logFormat?: string @go(LogFormat)

	// Size is the expected size of the alertmanager cluster. The controller will
	// eventually make the size of the running cluster equal to the expected
	// size.
	replicas?: null | int32 @go(Replicas,*int32)

	// Time duration Alertmanager shall retain data for. Default is '120h',
	// and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).
	// +kubebuilder:default:="120h"
	retention?: #GoDuration @go(Retention)

	// Storage is the definition of how storage will be used by the Alertmanager
	// instances.
	storage?: null | #StorageSpec @go(Storage,*StorageSpec)

	// Volumes allows configuration of additional volumes on the output StatefulSet definition.
	// Volumes specified will be appended to other volumes that are generated as a result of
	// StorageSpec objects.
	volumes?: [...v1.#Volume] @go(Volumes,[]v1.Volume)

	// VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition.
	// VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container,
	// that are generated as a result of StorageSpec objects.
	volumeMounts?: [...v1.#VolumeMount] @go(VolumeMounts,[]v1.VolumeMount)

	// The field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.
	// The default behavior is all PVCs are retained.
	// This is an alpha field from kubernetes 1.23 until 1.26 and a beta field from 1.26.
	// It requires enabling the StatefulSetAutoDeletePVC feature gate.
	//
	// +optional
	persistentVolumeClaimRetentionPolicy?: null | appsv1.#StatefulSetPersistentVolumeClaimRetentionPolicy @go(PersistentVolumeClaimRetentionPolicy,*appsv1.StatefulSetPersistentVolumeClaimRetentionPolicy)

	// The external URL the Alertmanager instances will be available under. This is
	// necessary to generate correct URLs. This is necessary if Alertmanager is not
	// served from root of a DNS name.
	externalUrl?: string @go(ExternalURL)

	// The route prefix Alertmanager registers HTTP handlers for. This is useful,
	// if using ExternalURL and a proxy is rewriting HTTP routes of a request,
	// and the actual ExternalURL is still true, but the server serves requests
	// under a different route prefix. For example for use with `kubectl proxy`.
	routePrefix?: string @go(RoutePrefix)

	// If set to true all actions on the underlying managed objects are not
	// going to be performed, except for delete actions.
	paused?: bool @go(Paused)

	// Define which Nodes the Pods are scheduled on.
	nodeSelector?: {[string]: string} @go(NodeSelector,map[string]string)

	// Define resources requests and limits for single Pods.
	resources?: v1.#ResourceRequirements @go(Resources)

	// If specified, the pod's scheduling constraints.
	affinity?: null | v1.#Affinity @go(Affinity,*v1.Affinity)

	// If specified, the pod's tolerations.
	tolerations?: [...v1.#Toleration] @go(Tolerations,[]v1.Toleration)

	// If specified, the pod's topology spread constraints.
	topologySpreadConstraints?: [...v1.#TopologySpreadConstraint] @go(TopologySpreadConstraints,[]v1.TopologySpreadConstraint)

	// SecurityContext holds pod-level security attributes and common container settings.
	// This defaults to the default PodSecurityContext.
	securityContext?: null | v1.#PodSecurityContext @go(SecurityContext,*v1.PodSecurityContext)

	// Defines the DNS policy for the pods.
	//
	// +optional
	dnsPolicy?: null | #DNSPolicy @go(DNSPolicy,*DNSPolicy)

	// Defines the DNS configuration for the pods.
	//
	// +optional
	dnsConfig?: null | #PodDNSConfig @go(DNSConfig,*PodDNSConfig)

	// Indicates whether information about services should be injected into pod's environment variables
	// +optional
	enableServiceLinks?: null | bool @go(EnableServiceLinks,*bool)

	// The name of the service name used by the underlying StatefulSet(s) as the governing service.
	// If defined, the Service  must be created before the Alertmanager resource in the same namespace and it must define a selector that matches the pod labels.
	// If empty, the operator will create and manage a headless service named `alertmanager-operated` for Alermanager resources.
	// When deploying multiple Alertmanager resources in the same namespace, it is recommended to specify a different value for each.
	// See https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id for more details.
	// +optional
	// +kubebuilder:validation:MinLength=1
	serviceName?: null | string @go(ServiceName,*string)

	// ServiceAccountName is the name of the ServiceAccount to use to run the
	// Prometheus Pods.
	serviceAccountName?: string @go(ServiceAccountName)

	// ListenLocal makes the Alertmanager server listen on loopback, so that it
	// does not bind against the Pod IP. Note this is only for the Alertmanager
	// UI, not the gossip communication.
	listenLocal?: bool @go(ListenLocal)

	// Containers allows injecting additional containers. This is meant to
	// allow adding an authentication proxy to an Alertmanager pod.
	// Containers described here modify an operator generated container if they
	// share the same name and modifications are done via a strategic merge
	// patch. The current container names are: `alertmanager` and
	// `config-reloader`. Overriding containers is entirely outside the scope
	// of what the maintainers will support and by doing so, you accept that
	// this behaviour may break at any time without notice.
	containers?: [...v1.#Container] @go(Containers,[]v1.Container)

	// InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.
	// fetch secrets for injection into the Alertmanager configuration from external sources. Any
	// errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	// InitContainers described here modify an operator
	// generated init containers if they share the same name and modifications are
	// done via a strategic merge patch. The current init container name is:
	// `init-config-reloader`. Overriding init containers is entirely outside the
	// scope of what the maintainers will support and by doing so, you accept that
	// this behaviour may break at any time without notice.
	initContainers?: [...v1.#Container] @go(InitContainers,[]v1.Container)

	// Priority class assigned to the Pods
	priorityClassName?: string @go(PriorityClassName)

	// AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.
	additionalPeers?: [...string] @go(AdditionalPeers,[]string)

	// ClusterAdvertiseAddress is the explicit address to advertise in cluster.
	// Needs to be provided for non RFC1918 [1] (public) addresses.
	// [1] RFC1918: https://tools.ietf.org/html/rfc1918
	clusterAdvertiseAddress?: string @go(ClusterAdvertiseAddress)

	// Interval between gossip attempts.
	clusterGossipInterval?: #GoDuration @go(ClusterGossipInterval)

	// Defines the identifier that uniquely identifies the Alertmanager cluster.
	// You should only set it when the Alertmanager cluster includes Alertmanager instances which are external to this Alertmanager resource. In practice, the addresses of the external instances are provided via the `.spec.additionalPeers` field.
	clusterLabel?: null | string @go(ClusterLabel,*string)

	// Interval between pushpull attempts.
	clusterPushpullInterval?: #GoDuration @go(ClusterPushpullInterval)

	// Timeout for cluster peering.
	clusterPeerTimeout?: #GoDuration @go(ClusterPeerTimeout)

	// Port name used for the pods and governing service.
	// Defaults to `web`.
	// +kubebuilder:default:="web"
	portName?: string @go(PortName)

	// ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica.
	// Use case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.
	forceEnableClusterMode?: bool @go(ForceEnableClusterMode)

	// AlertmanagerConfigs to be selected for to merge and configure Alertmanager with.
	alertmanagerConfigSelector?: null | metav1.#LabelSelector @go(AlertmanagerConfigSelector,*metav1.LabelSelector)

	// Namespaces to be selected for AlertmanagerConfig discovery. If nil, only
	// check own namespace.
	alertmanagerConfigNamespaceSelector?: null | metav1.#LabelSelector @go(AlertmanagerConfigNamespaceSelector,*metav1.LabelSelector)

	// AlertmanagerConfigMatcherStrategy defines how AlertmanagerConfig objects
	// process incoming alerts.
	alertmanagerConfigMatcherStrategy?: #AlertmanagerConfigMatcherStrategy @go(AlertmanagerConfigMatcherStrategy)

	// Minimum number of seconds for which a newly created pod should be ready
	// without any of its container crashing for it to be considered available.
	//
	// If unset, pods will be considered available as soon as they are ready.
	//
	// +kubebuilder:validation:Minimum:=0
	// +optional
	minReadySeconds?: null | int32 @go(MinReadySeconds,*int32)

	// Pods' hostAliases configuration
	// +listType=map
	// +listMapKey=ip
	hostAliases?: [...#HostAlias] @go(HostAliases,[]HostAlias)

	// Defines the web command line flags when starting Alertmanager.
	web?: null | #AlertmanagerWebSpec @go(Web,*AlertmanagerWebSpec)

	// Defines the limits command line flags when starting Alertmanager.
	limits?: null | #AlertmanagerLimitsSpec @go(Limits,*AlertmanagerLimitsSpec)

	// Configures the mutual TLS configuration for the Alertmanager cluster's gossip protocol.
	//
	// It requires Alertmanager >= 0.24.0.
	//+optional
	clusterTLS?: null | #ClusterTLSConfig @go(ClusterTLS,*ClusterTLSConfig)

	// alertmanagerConfiguration specifies the configuration of Alertmanager.
	//
	// If defined, it takes precedence over the `configSecret` field.
	//
	// This is an *experimental feature*, it may change in any upcoming release
	// in a breaking way.
	//
	//+optional
	alertmanagerConfiguration?: null | #AlertmanagerConfiguration @go(AlertmanagerConfiguration,*AlertmanagerConfiguration)

	// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in the pod.
	// If the service account has `automountServiceAccountToken: true`, set the field to `false` to opt out of automounting API credentials.
	// +optional
	automountServiceAccountToken?: null | bool @go(AutomountServiceAccountToken,*bool)

	// Enable access to Alertmanager feature flags. By default, no features are enabled.
	// Enabling features which are disabled by default is entirely outside the
	// scope of what the maintainers will support and by doing so, you accept
	// that this behaviour may break at any time without notice.
	//
	// It requires Alertmanager >= 0.27.0.
	// +optional
	enableFeatures?: [...string] @go(EnableFeatures,[]string)

	// AdditionalArgs allows setting additional arguments for the 'Alertmanager' container.
	// It is intended for e.g. activating hidden flags which are not supported by
	// the dedicated configuration options yet. The arguments are passed as-is to the
	// Alertmanager container which may cause issues if they are invalid or not supported
	// by the given Alertmanager version.
	// +optional
	additionalArgs?: [...#Argument] @go(AdditionalArgs,[]Argument)

	// Optional duration in seconds the pod needs to terminate gracefully.
	// Value must be non-negative integer. The value zero indicates stop immediately via
	// the kill signal (no opportunity to shut down) which may lead to data corruption.
	//
	// Defaults to 120 seconds.
	//
	// +kubebuilder:validation:Minimum:=0
	// +optional
	terminationGracePeriodSeconds?: null | int64 @go(TerminationGracePeriodSeconds,*int64)

	// HostUsers supports the user space in Kubernetes.
	//
	// More info: https://kubernetes.io/docs/tasks/configure-pod-container/user-namespaces/
	//
	//
	// The feature requires at least Kubernetes 1.28 with the `UserNamespacesSupport` feature gate enabled.
	// Starting Kubernetes 1.33, the feature is enabled by default.
	//
	// +optional
	hostUsers?: null | bool @go(HostUsers,*bool)
}

#AlertmanagerConfigMatcherStrategy: {
	// AlertmanagerConfigMatcherStrategyType defines the strategy used by
	// AlertmanagerConfig objects to match alerts in the routes and inhibition
	// rules.
	//
	// The default value is `OnNamespace`.
	//
	// +kubebuilder:validation:Enum="OnNamespace";"OnNamespaceExceptForAlertmanagerNamespace";"None"
	// +kubebuilder:default:="OnNamespace"
	type?: #AlertmanagerConfigMatcherStrategyType @go(Type)
}

#AlertmanagerConfigMatcherStrategyType: string // #enumAlertmanagerConfigMatcherStrategyType

#enumAlertmanagerConfigMatcherStrategyType:
	#OnNamespaceConfigMatcherStrategyType |
	#OnNamespaceExceptForAlertmanagerNamespaceConfigMatcherStrategyType |
	#NoneConfigMatcherStrategyType

// With `OnNamespace`, the route and inhibition rules of an
// AlertmanagerConfig object only process alerts that have a `namespace`
// label equal to the namespace of the object.
#OnNamespaceConfigMatcherStrategyType: #AlertmanagerConfigMatcherStrategyType & "OnNamespace"

// With `OnNamespaceExceptForAlertmanagerNamespace`, the route and inhibition rules of an
// AlertmanagerConfig object only process alerts that have a `namespace`
// label equal to the namespace of the object, unless the AlertmanagerConfig object
// is in the same namespace as the Alertmanager object, where it will process all alerts.
#OnNamespaceExceptForAlertmanagerNamespaceConfigMatcherStrategyType: #AlertmanagerConfigMatcherStrategyType & "OnNamespaceExceptForAlertmanagerNamespace"

// With `None`, the route and inhbition rules of an AlertmanagerConfig
// object process all incoming alerts.
#NoneConfigMatcherStrategyType: #AlertmanagerConfigMatcherStrategyType & "None"

// AlertmanagerConfiguration defines the Alertmanager configuration.
// +k8s:openapi-gen=true
#AlertmanagerConfiguration: {
	// The name of the AlertmanagerConfig resource which is used to generate the Alertmanager configuration.
	// It must be defined in the same namespace as the Alertmanager object.
	// The operator will not enforce a `namespace` label for routes and inhibition rules.
	// +kubebuilder:validation:MinLength=1
	name?: string @go(Name)

	// Defines the global parameters of the Alertmanager configuration.
	// +optional
	global?: null | #AlertmanagerGlobalConfig @go(Global,*AlertmanagerGlobalConfig)

	// Custom notification templates.
	// +optional
	templates?: [...#SecretOrConfigMap] @go(Templates,[]SecretOrConfigMap)
}

// AlertmanagerGlobalConfig configures parameters that are valid in all other configuration contexts.
// See https://prometheus.io/docs/alerting/latest/configuration/#configuration-file
#AlertmanagerGlobalConfig: {
	// Configures global SMTP parameters.
	// +optional
	smtp?: null | #GlobalSMTPConfig @go(SMTPConfig,*GlobalSMTPConfig)

	// ResolveTimeout is the default value used by alertmanager if the alert does
	// not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated.
	// This has no impact on alerts from Prometheus, as they always include EndsAt.
	resolveTimeout?: #Duration @go(ResolveTimeout)

	// HTTP client configuration.
	httpConfig?: null | #HTTPConfig @go(HTTPConfig,*HTTPConfig)

	// The default Slack API URL.
	slackApiUrl?: null | v1.#SecretKeySelector @go(SlackAPIURL,*v1.SecretKeySelector)

	// The default OpsGenie API URL.
	opsGenieApiUrl?: null | v1.#SecretKeySelector @go(OpsGenieAPIURL,*v1.SecretKeySelector)

	// The default OpsGenie API Key.
	opsGenieApiKey?: null | v1.#SecretKeySelector @go(OpsGenieAPIKey,*v1.SecretKeySelector)

	// The default Pagerduty URL.
	pagerdutyUrl?: null | string @go(PagerdutyURL,*string)

	// The default Telegram config
	telegram?: null | #GlobalTelegramConfig @go(TelegramConfig,*GlobalTelegramConfig)

	// The default configuration for Jira.
	jira?: null | #GlobalJiraConfig @go(JiraConfig,*GlobalJiraConfig)

	// The default configuration for VictorOps.
	victorops?: null | #GlobalVictorOpsConfig @go(VictorOpsConfig,*GlobalVictorOpsConfig)

	// The default configuration for Rocket Chat.
	rocketChat?: null | #GlobalRocketChatConfig @go(RocketChatConfig,*GlobalRocketChatConfig)

	// The default configuration for Jira.
	webex?: null | #GlobalWebexConfig @go(WebexConfig,*GlobalWebexConfig)

	// The default WeChat Config
	// +optional
	wechat?: null | #GlobalWeChatConfig @go(WeChatConfig,*GlobalWeChatConfig)
}

// AlertmanagerStatus is the most recent observed status of the Alertmanager cluster. Read-only.
// More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
// +k8s:openapi-gen=true
#AlertmanagerStatus: {
	// Represents whether any actions on the underlying managed objects are
	// being performed. Only delete actions will be performed.
	paused: bool @go(Paused)

	// Total number of non-terminated pods targeted by this Alertmanager
	// object (their labels match the selector).
	replicas: int32 @go(Replicas)

	// Total number of non-terminated pods targeted by this Alertmanager
	// object that have the desired version spec.
	updatedReplicas: int32 @go(UpdatedReplicas)

	// Total number of available pods (ready for at least minReadySeconds)
	// targeted by this Alertmanager cluster.
	availableReplicas: int32 @go(AvailableReplicas)

	// Total number of unavailable pods targeted by this Alertmanager object.
	unavailableReplicas: int32 @go(UnavailableReplicas)

	// The selector used to match the pods targeted by this Alertmanager object.
	selector?: string @go(Selector)

	// The current state of the Alertmanager object.
	// +listType=map
	// +listMapKey=type
	// +optional
	conditions?: [...#Condition] @go(Conditions,[]Condition)
}

// AlertmanagerWebSpec defines the web command line flags when starting Alertmanager.
// +k8s:openapi-gen=true
#AlertmanagerWebSpec: {
	#WebConfigFileFields

	// Maximum number of GET requests processed concurrently. This corresponds to the
	// Alertmanager's `--web.get-concurrency` flag.
	// +optional
	getConcurrency?: null | uint32 @go(GetConcurrency,*uint32)

	// Timeout for HTTP requests. This corresponds to the Alertmanager's
	// `--web.timeout` flag.
	// +optional
	timeout?: null | uint32 @go(Timeout,*uint32)
}

// AlertmanagerLimitsSpec defines the limits command line flags when starting Alertmanager.
// +k8s:openapi-gen=true
#AlertmanagerLimitsSpec: {
	// The maximum number active and pending silences. This corresponds to the
	// Alertmanager's `--silences.max-silences` flag.
	// It requires Alertmanager >= v0.28.0.
	//
	// +kubebuilder:validation:Minimum:=0
	// +optional
	maxSilences?: null | int32 @go(MaxSilences,*int32)

	// The maximum size of an individual silence as stored on disk. This corresponds to the Alertmanager's
	// `--silences.max-per-silence-bytes` flag.
	// It requires Alertmanager >= v0.28.0.
	//
	// +optional
	maxPerSilenceBytes?: null | #ByteSize @go(MaxPerSilenceBytes,*ByteSize)
}

// GlobalSMTPConfig configures global SMTP parameters.
// See https://prometheus.io/docs/alerting/latest/configuration/#configuration-file
#GlobalSMTPConfig: {
	// The default SMTP From header field.
	// +optional
	from?: null | string @go(From,*string)

	// The default SMTP smarthost used for sending emails.
	// +optional
	smartHost?: null | #HostPort @go(SmartHost,*HostPort)

	// The default hostname to identify to the SMTP server.
	// +optional
	hello?: null | string @go(Hello,*string)

	// SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
	// +optional
	authUsername?: null | string @go(AuthUsername,*string)

	// SMTP Auth using LOGIN and PLAIN.
	// +optional
	authPassword?: null | v1.#SecretKeySelector @go(AuthPassword,*v1.SecretKeySelector)

	// SMTP Auth using PLAIN
	// +optional
	authIdentity?: null | string @go(AuthIdentity,*string)

	// SMTP Auth using CRAM-MD5.
	// +optional
	authSecret?: null | v1.#SecretKeySelector @go(AuthSecret,*v1.SecretKeySelector)

	// The default SMTP TLS requirement.
	// Note that Go does not support unencrypted connections to remote SMTP endpoints.
	// +optional
	requireTLS?: null | bool @go(RequireTLS,*bool)

	// The default TLS configuration for SMTP receivers
	// +optional
	tlsConfig?: null | #SafeTLSConfig @go(TLSConfig,*SafeTLSConfig)
}

// GlobalTelegramConfig configures global Telegram parameters.
#GlobalTelegramConfig: {
	// The default Telegram API URL.
	//
	// It requires Alertmanager >= v0.24.0.
	// +optional
	apiURL?: null | #URL @go(APIURL,*URL)
}

// GlobalJiraConfig configures global Jira parameters.
#GlobalJiraConfig: {
	// The default Jira API URL.
	//
	// It requires Alertmanager >= v0.28.0.
	//
	// +optional
	apiURL?: null | #URL @go(APIURL,*URL)
}

// GlobalRocketChatConfig configures global Rocket Chat parameters.
#GlobalRocketChatConfig: {
	// The default Rocket Chat API URL.
	//
	// It requires Alertmanager >= v0.28.0.
	//
	// +optional
	apiURL?: null | #URL @go(APIURL,*URL)

	// The default Rocket Chat token.
	//
	// It requires Alertmanager >= v0.28.0.
	//
	// +optional
	token?: null | v1.#SecretKeySelector @go(Token,*v1.SecretKeySelector)

	// The default Rocket Chat Token ID.
	//
	// It requires Alertmanager >= v0.28.0.
	//
	// +optional
	tokenID?: null | v1.#SecretKeySelector @go(TokenID,*v1.SecretKeySelector)
}

// GlobalWebexConfig configures global Webex parameters.
// See https://prometheus.io/docs/alerting/latest/configuration/#configuration-file
#GlobalWebexConfig: {
	// The default Webex API URL.
	//
	// It requires Alertmanager >= v0.25.0.
	//
	// +optional
	apiURL?: null | #URL @go(APIURL,*URL)
}

#GlobalWeChatConfig: {
	// The default WeChat API URL.
	// The default value is "https://qyapi.weixin.qq.com/cgi-bin/"
	// +optional
	apiURL?: null | #URL @go(APIURL,*URL)

	// The default WeChat API Secret.
	// +optional
	apiSecret?: null | v1.#SecretKeySelector @go(APISecret,*v1.SecretKeySelector)

	// The default WeChat API Corporate ID.
	// +optional
	// +kubebuilder:validation:MinLength=1
	apiCorpID?: null | string @go(APICorpID,*string)
}

// GlobalVictorOpsConfig configures global VictorOps parameters.
#GlobalVictorOpsConfig: {
	// The default VictorOps API URL.
	//
	// +optional
	apiURL?: null | #URL @go(APIURL,*URL)

	// The default VictorOps API Key.
	//
	// +optional
	apiKey?: null | v1.#SecretKeySelector @go(APIKey,*v1.SecretKeySelector)
}

// HostPort represents a "host:port" network address.
#HostPort: {
	// Defines the host's address, it can be a DNS name or a literal IP address.
	// +kubebuilder:validation:MinLength=1
	host: string @go(Host)

	// Defines the host's port, it can be a literal port number or a port name.
	// +kubebuilder:validation:MinLength=1
	port: string @go(Port)
}

// HTTPConfig defines a client HTTP configuration.
// See https://prometheus.io/docs/alerting/latest/configuration/#http_config
#HTTPConfig: {
	// Authorization header configuration for the client.
	// This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
	// +optional
	authorization?: null | #SafeAuthorization @go(Authorization,*SafeAuthorization)

	// BasicAuth for the client.
	// This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
	// +optional
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// OAuth2 client credentials used to fetch a token for the targets.
	// +optional
	oauth2?: null | #OAuth2 @go(OAuth2,*OAuth2)

	// The secret's key that contains the bearer token to be used by the client
	// for authentication.
	// The secret needs to be in the same namespace as the Alertmanager
	// object and accessible by the Prometheus Operator.
	// +optional
	bearerTokenSecret?: null | v1.#SecretKeySelector @go(BearerTokenSecret,*v1.SecretKeySelector)

	// TLS configuration for the client.
	// +optional
	tlsConfig?: null | #SafeTLSConfig @go(TLSConfig,*SafeTLSConfig)

	#ProxyConfig

	// FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
	// +optional
	followRedirects?: null | bool @go(FollowRedirects,*bool)
}

// AlertmanagerList is a list of Alertmanagers.
// +k8s:openapi-gen=true
#AlertmanagerList: {
	metav1.#TypeMeta

	// Standard list metadata
	// More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata?: metav1.#ListMeta @go(ListMeta)

	// List of Alertmanagers
	items: [...#Alertmanager] @go(Items,[]Alertmanager)
}

// ClusterTLSConfig defines the mutual TLS configuration for the Alertmanager cluster TLS protocol.
// +k8s:openapi-gen=true
#ClusterTLSConfig: {
	// Server-side configuration for mutual TLS.
	// +required
	server: #WebTLSConfig @go(ServerTLS)

	// Client-side configuration for mutual TLS.
	// +required
	client: #SafeTLSConfig @go(ClientTLS)
}

// URL represents a valid URL
// +kubebuilder:validation:Pattern:="^(http|https)://.+$"
#URL: string
