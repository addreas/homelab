// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
)

#Version:               "v1"
#PrometheusesKind:      "Prometheus"
#PrometheusName:        "prometheuses"
#PrometheusKindKey:     "prometheus"
#AlertmanagersKind:     "Alertmanager"
#AlertmanagerName:      "alertmanagers"
#AlertManagerKindKey:   "alertmanager"
#ServiceMonitorsKind:   "ServiceMonitor"
#ServiceMonitorName:    "servicemonitors"
#ServiceMonitorKindKey: "servicemonitor"
#PodMonitorsKind:       "PodMonitor"
#PodMonitorName:        "podmonitors"
#PodMonitorKindKey:     "podmonitor"
#PrometheusRuleKind:    "PrometheusRule"
#PrometheusRuleName:    "prometheusrules"
#PrometheusRuleKindKey: "prometheusrule"
#ProbesKind:            "Probe"
#ProbeName:             "probes"
#ProbeKindKey:          "probe"

// Prometheus defines a Prometheus deployment.
// +genclient
// +k8s:openapi-gen=true
// +kubebuilder:resource:categories="prometheus-operator"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version",description="The version of Prometheus"
// +kubebuilder:printcolumn:name="Replicas",type="integer",JSONPath=".spec.replicas",description="The desired replicas number of Prometheuses"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
#Prometheus: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Specification of the desired behavior of the Prometheus cluster. More info:
	// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	spec: #PrometheusSpec @go(Spec)

	// Most recent observed status of the Prometheus cluster. Read-only. Not
	// included when requesting from the apiserver, only from the Prometheus
	// Operator API itself. More info:
	// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	status?: null | #PrometheusStatus @go(Status,*PrometheusStatus)
}

// PrometheusList is a list of Prometheuses.
// +k8s:openapi-gen=true
#PrometheusList: {
	metav1.#TypeMeta

	// Standard list metadata
	// More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata?: metav1.#ListMeta @go(ListMeta)

	// List of Prometheuses
	items: [...null | #Prometheus] @go(Items,[]*Prometheus)
}

// PrometheusSpec is a specification of the desired behavior of the Prometheus cluster. More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
// +k8s:openapi-gen=true
#PrometheusSpec: {
	// PodMetadata configures Labels and Annotations which are propagated to the prometheus pods.
	podMetadata?: null | #EmbeddedObjectMetadata @go(PodMetadata,*EmbeddedObjectMetadata)

	// ServiceMonitors to be selected for target discovery. *Deprecated:* if
	// neither this nor podMonitorSelector are specified, configuration is
	// unmanaged.
	serviceMonitorSelector?: null | metav1.#LabelSelector @go(ServiceMonitorSelector,*metav1.LabelSelector)

	// Namespace's labels to match for ServiceMonitor discovery. If nil, only
	// check own namespace.
	serviceMonitorNamespaceSelector?: null | metav1.#LabelSelector @go(ServiceMonitorNamespaceSelector,*metav1.LabelSelector)

	// *Experimental* PodMonitors to be selected for target discovery.
	// *Deprecated:* if neither this nor serviceMonitorSelector are specified,
	// configuration is unmanaged.
	podMonitorSelector?: null | metav1.#LabelSelector @go(PodMonitorSelector,*metav1.LabelSelector)

	// Namespace's labels to match for PodMonitor discovery. If nil, only
	// check own namespace.
	podMonitorNamespaceSelector?: null | metav1.#LabelSelector @go(PodMonitorNamespaceSelector,*metav1.LabelSelector)

	// *Experimental* Probes to be selected for target discovery.
	probeSelector?: null | metav1.#LabelSelector @go(ProbeSelector,*metav1.LabelSelector)

	// *Experimental* Namespaces to be selected for Probe discovery. If nil, only check own namespace.
	probeNamespaceSelector?: null | metav1.#LabelSelector @go(ProbeNamespaceSelector,*metav1.LabelSelector)

	// Version of Prometheus to be deployed.
	version?: string @go(Version)

	// Tag of Prometheus container image to be deployed. Defaults to the value of `version`.
	// Version is ignored if Tag is set.
	// Deprecated: use 'image' instead.  The image tag can be specified
	// as part of the image URL.
	tag?: string @go(Tag)

	// SHA of Prometheus container image to be deployed. Defaults to the value of `version`.
	// Similar to a tag, but the SHA explicitly deploys an immutable container image.
	// Version and Tag are ignored if SHA is set.
	// Deprecated: use 'image' instead.  The image digest can be specified
	// as part of the image URL.
	sha?: string @go(SHA)

	// When a Prometheus deployment is paused, no actions except for deletion
	// will be performed on the underlying objects.
	paused?: bool @go(Paused)

	// Image if specified has precedence over baseImage, tag and sha
	// combinations. Specifying the version is still necessary to ensure the
	// Prometheus Operator knows what version of Prometheus is being
	// configured.
	image?: null | string @go(Image,*string)

	// Base image to use for a Prometheus deployment.
	// Deprecated: use 'image' instead
	baseImage?: string @go(BaseImage)

	// An optional list of references to secrets in the same namespace
	// to use for pulling prometheus and alertmanager images from registries
	// see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
	imagePullSecrets?: [...v1.#LocalObjectReference] @go(ImagePullSecrets,[]v1.LocalObjectReference)

	// Number of replicas of each shard to deploy for a Prometheus deployment.
	// Number of replicas multiplied by shards is the total number of Pods
	// created.
	replicas?: null | int32 @go(Replicas,*int32)

	// EXPERIMENTAL: Number of shards to distribute targets onto. Number of
	// replicas multiplied by shards is the total number of Pods created. Note
	// that scaling down shards will not reshard data onto remaining instances,
	// it must be manually moved. Increasing shards will not reshard data
	// either but it will continue to be available from the same instances. To
	// query globally use Thanos sidecar and Thanos querier or remote write
	// data to a central location. Sharding is done on the content of the
	// `__address__` target meta-label.
	shards?: null | int32 @go(Shards,*int32)

	// Name of Prometheus external label used to denote replica name.
	// Defaults to the value of `prometheus_replica`. External label will
	// _not_ be added when value is set to empty string (`""`).
	replicaExternalLabelName?: null | string @go(ReplicaExternalLabelName,*string)

	// Name of Prometheus external label used to denote Prometheus instance
	// name. Defaults to the value of `prometheus`. External label will
	// _not_ be added when value is set to empty string (`""`).
	prometheusExternalLabelName?: null | string @go(PrometheusExternalLabelName,*string)

	// Time duration Prometheus shall retain data for. Default is '24h',
	// and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).
	retention?: string @go(Retention)

	// Maximum amount of disk space used by blocks. Supported units: B, KB, MB, GB, TB, PB, EB. Ex: `512MB`.
	retentionSize?: string @go(RetentionSize)

	// Disable prometheus compaction.
	disableCompaction?: bool @go(DisableCompaction)

	// Enable compression of the write-ahead log using Snappy. This flag is
	// only available in versions of Prometheus >= 2.11.0.
	walCompression?: null | bool @go(WALCompression,*bool)

	// Log level for Prometheus to be configured with.
	logLevel?: string @go(LogLevel)

	// Log format for Prometheus to be configured with.
	logFormat?: string @go(LogFormat)

	// Interval between consecutive scrapes.
	scrapeInterval?: string @go(ScrapeInterval)

	// Number of seconds to wait for target to respond before erroring.
	scrapeTimeout?: string @go(ScrapeTimeout)

	// Interval between consecutive evaluations.
	evaluationInterval?: string @go(EvaluationInterval)

	// /--rules.*/ command-line arguments.
	rules?: #Rules @go(Rules)

	// The labels to add to any time series or alerts when communicating with
	// external systems (federation, remote storage, Alertmanager).
	externalLabels?: {[string]: string} @go(ExternalLabels,map[string]string)

	// Enable access to prometheus web admin API. Defaults to the value of `false`.
	// WARNING: Enabling the admin APIs enables mutating endpoints, to delete data,
	// shutdown Prometheus, and more. Enabling this should be done with care and the
	// user is advised to add additional authentication authorization via a proxy to
	// ensure only clients authorized to perform these actions can do so.
	// For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis
	enableAdminAPI?: bool @go(EnableAdminAPI)

	// The external URL the Prometheus instances will be available under. This is
	// necessary to generate correct URLs. This is necessary if Prometheus is not
	// served from root of a DNS name.
	externalUrl?: string @go(ExternalURL)

	// The route prefix Prometheus registers HTTP handlers for. This is useful,
	// if using ExternalURL and a proxy is rewriting HTTP routes of a request,
	// and the actual ExternalURL is still true, but the server serves requests
	// under a different route prefix. For example for use with `kubectl proxy`.
	routePrefix?: string @go(RoutePrefix)

	// QuerySpec defines the query command line flags when starting Prometheus.
	query?: null | #QuerySpec @go(Query,*QuerySpec)

	// Storage spec to specify how storage shall be used.
	storage?: null | #StorageSpec @go(Storage,*StorageSpec)

	// Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will
	// be appended to other volumes that are generated as a result of StorageSpec objects.
	volumes?: [...v1.#Volume] @go(Volumes,[]v1.Volume)

	// VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition.
	// VolumeMounts specified will be appended to other VolumeMounts in the prometheus container,
	// that are generated as a result of StorageSpec objects.
	volumeMounts?: [...v1.#VolumeMount] @go(VolumeMounts,[]v1.VolumeMount)

	// WebSpec defines the web command line flags when starting Prometheus.
	web?: null | #WebSpec @go(Web,*WebSpec)

	// A selector to select which PrometheusRules to mount for loading alerting/recording
	// rules from. Until (excluding) Prometheus Operator v0.24.0 Prometheus
	// Operator will migrate any legacy rule ConfigMaps to PrometheusRule custom
	// resources selected by RuleSelector. Make sure it does not match any config
	// maps that you do not want to be migrated.
	ruleSelector?: null | metav1.#LabelSelector @go(RuleSelector,*metav1.LabelSelector)

	// Namespaces to be selected for PrometheusRules discovery. If unspecified, only
	// the same namespace as the Prometheus object is in is used.
	ruleNamespaceSelector?: null | metav1.#LabelSelector @go(RuleNamespaceSelector,*metav1.LabelSelector)

	// Define details regarding alerting.
	alerting?: null | #AlertingSpec @go(Alerting,*AlertingSpec)

	// Define resources requests and limits for single Pods.
	resources?: v1.#ResourceRequirements @go(Resources)

	// Define which Nodes the Pods are scheduled on.
	nodeSelector?: {[string]: string} @go(NodeSelector,map[string]string)

	// ServiceAccountName is the name of the ServiceAccount to use to run the
	// Prometheus Pods.
	serviceAccountName?: string @go(ServiceAccountName)

	// Secrets is a list of Secrets in the same namespace as the Prometheus
	// object, which shall be mounted into the Prometheus Pods.
	// The Secrets are mounted into /etc/prometheus/secrets/<secret-name>.
	secrets?: [...string] @go(Secrets,[]string)

	// ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus
	// object, which shall be mounted into the Prometheus Pods.
	// The ConfigMaps are mounted into /etc/prometheus/configmaps/<configmap-name>.
	configMaps?: [...string] @go(ConfigMaps,[]string)

	// If specified, the pod's scheduling constraints.
	affinity?: null | v1.#Affinity @go(Affinity,*v1.Affinity)

	// If specified, the pod's tolerations.
	tolerations?: [...v1.#Toleration] @go(Tolerations,[]v1.Toleration)

	// If specified, the pod's topology spread constraints.
	topologySpreadConstraints?: [...v1.#TopologySpreadConstraint] @go(TopologySpreadConstraints,[]v1.TopologySpreadConstraint)

	// If specified, the remote_write spec. This is an experimental feature, it may change in any upcoming release in a breaking way.
	remoteWrite?: [...#RemoteWriteSpec] @go(RemoteWrite,[]RemoteWriteSpec)

	// If specified, the remote_read spec. This is an experimental feature, it may change in any upcoming release in a breaking way.
	remoteRead?: [...#RemoteReadSpec] @go(RemoteRead,[]RemoteReadSpec)

	// SecurityContext holds pod-level security attributes and common container settings.
	// This defaults to the default PodSecurityContext.
	securityContext?: null | v1.#PodSecurityContext @go(SecurityContext,*v1.PodSecurityContext)

	// ListenLocal makes the Prometheus server listen on loopback, so that it
	// does not bind against the Pod IP.
	listenLocal?: bool @go(ListenLocal)

	// Containers allows injecting additional containers or modifying operator
	// generated containers. This can be used to allow adding an authentication
	// proxy to a Prometheus pod or to change the behavior of an operator
	// generated container. Containers described here modify an operator
	// generated container if they share the same name and modifications are
	// done via a strategic merge patch. The current container names are:
	// `prometheus`, `config-reloader`, and `thanos-sidecar`. Overriding
	// containers is entirely outside the scope of what the maintainers will
	// support and by doing so, you accept that this behaviour may break at any
	// time without notice.
	containers?: [...v1.#Container] @go(Containers,[]v1.Container)

	// InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.
	// fetch secrets for injection into the Prometheus configuration from external sources. Any errors
	// during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	// Using initContainers for any use case other then secret fetching is entirely outside the scope
	// of what the maintainers will support and by doing so, you accept that this behaviour may break
	// at any time without notice.
	initContainers?: [...v1.#Container] @go(InitContainers,[]v1.Container)

	// AdditionalScrapeConfigs allows specifying a key of a Secret containing
	// additional Prometheus scrape configurations. Scrape configurations
	// specified are appended to the configurations generated by the Prometheus
	// Operator. Job configurations specified must have the form as specified
	// in the official Prometheus documentation:
	// https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config.
	// As scrape configs are appended, the user is responsible to make sure it
	// is valid. Note that using this feature may expose the possibility to
	// break upgrades of Prometheus. It is advised to review Prometheus release
	// notes to ensure that no incompatible scrape configs are going to break
	// Prometheus after the upgrade.
	additionalScrapeConfigs?: null | v1.#SecretKeySelector @go(AdditionalScrapeConfigs,*v1.SecretKeySelector)

	// AdditionalAlertRelabelConfigs allows specifying a key of a Secret containing
	// additional Prometheus alert relabel configurations. Alert relabel configurations
	// specified are appended to the configurations generated by the Prometheus
	// Operator. Alert relabel configurations specified must have the form as specified
	// in the official Prometheus documentation:
	// https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs.
	// As alert relabel configs are appended, the user is responsible to make sure it
	// is valid. Note that using this feature may expose the possibility to
	// break upgrades of Prometheus. It is advised to review Prometheus release
	// notes to ensure that no incompatible alert relabel configs are going to break
	// Prometheus after the upgrade.
	additionalAlertRelabelConfigs?: null | v1.#SecretKeySelector @go(AdditionalAlertRelabelConfigs,*v1.SecretKeySelector)

	// AdditionalAlertManagerConfigs allows specifying a key of a Secret containing
	// additional Prometheus AlertManager configurations. AlertManager configurations
	// specified are appended to the configurations generated by the Prometheus
	// Operator. Job configurations specified must have the form as specified
	// in the official Prometheus documentation:
	// https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config.
	// As AlertManager configs are appended, the user is responsible to make sure it
	// is valid. Note that using this feature may expose the possibility to
	// break upgrades of Prometheus. It is advised to review Prometheus release
	// notes to ensure that no incompatible AlertManager configs are going to break
	// Prometheus after the upgrade.
	additionalAlertManagerConfigs?: null | v1.#SecretKeySelector @go(AdditionalAlertManagerConfigs,*v1.SecretKeySelector)

	// APIServerConfig allows specifying a host and auth methods to access apiserver.
	// If left empty, Prometheus is assumed to run inside of the cluster
	// and will discover API servers automatically and use the pod's CA certificate
	// and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.
	apiserverConfig?: null | #APIServerConfig @go(APIServerConfig,*APIServerConfig)

	// Thanos configuration allows configuring various aspects of a Prometheus
	// server in a Thanos environment.
	//
	// This section is experimental, it may change significantly without
	// deprecation notice in any release.
	//
	// This is experimental and may change significantly without backward
	// compatibility in any release.
	thanos?: null | #ThanosSpec @go(Thanos,*ThanosSpec)

	// Priority class assigned to the Pods
	priorityClassName?: string @go(PriorityClassName)

	// Port name used for the pods and governing service.
	// This defaults to web
	portName?: string @go(PortName)

	// ArbitraryFSAccessThroughSMs configures whether configuration
	// based on a service monitor can access arbitrary files on the file system
	// of the Prometheus container e.g. bearer token files.
	arbitraryFSAccessThroughSMs?: #ArbitraryFSAccessThroughSMsConfig @go(ArbitraryFSAccessThroughSMs)

	// OverrideHonorLabels if set to true overrides all user configured honor_labels.
	// If HonorLabels is set in ServiceMonitor or PodMonitor to true, this overrides honor_labels to false.
	overrideHonorLabels?: bool @go(OverrideHonorLabels)

	// OverrideHonorTimestamps allows to globally enforce honoring timestamps in all scrape configs.
	overrideHonorTimestamps?: bool @go(OverrideHonorTimestamps)

	// IgnoreNamespaceSelectors if set to true will ignore NamespaceSelector settings from
	// the podmonitor and servicemonitor configs, and they will only discover endpoints
	// within their current namespace.  Defaults to false.
	ignoreNamespaceSelectors?: bool @go(IgnoreNamespaceSelectors)

	// EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert
	// and metric that is user created. The label value will always be the namespace of the object that is
	// being created.
	enforcedNamespaceLabel?: string @go(EnforcedNamespaceLabel)

	// PrometheusRulesExcludedFromEnforce - list of prometheus rules to be excluded from enforcing
	// of adding namespace labels. Works only if enforcedNamespaceLabel set to true.
	// Make sure both ruleNamespace and ruleName are set for each pair
	prometheusRulesExcludedFromEnforce?: [...#PrometheusRuleExcludeConfig] @go(PrometheusRulesExcludedFromEnforce,[]PrometheusRuleExcludeConfig)

	// QueryLogFile specifies the file to which PromQL queries are logged.
	// Note that this location must be writable, and can be persisted using an attached volume.
	// Alternatively, the location can be set to a stdout location such as `/dev/stdout` to log
	// querie information to the default Prometheus log stream.
	// This is only available in versions of Prometheus >= 2.16.0.
	// For more details, see the Prometheus docs (https://prometheus.io/docs/guides/query-log/)
	queryLogFile?: string @go(QueryLogFile)

	// EnforcedSampleLimit defines global limit on number of scraped samples
	// that will be accepted. This overrides any SampleLimit set per
	// ServiceMonitor or/and PodMonitor. It is meant to be used by admins to
	// enforce the SampleLimit to keep overall number of samples/series under
	// the desired limit.
	// Note that if SampleLimit is lower that value will be taken instead.
	enforcedSampleLimit?: null | uint64 @go(EnforcedSampleLimit,*uint64)

	// AllowOverlappingBlocks enables vertical compaction and vertical query merge in Prometheus.
	// This is still experimental in Prometheus so it may change in any upcoming release.
	allowOverlappingBlocks?: bool @go(AllowOverlappingBlocks)

	// EnforcedTargetLimit defines a global limit on the number of scraped targets.
	// This overrides any TargetLimit set per ServiceMonitor or/and PodMonitor.
	// It is meant to be used by admins to
	// enforce the TargetLimit to keep overall number of targets under
	// the desired limit.
	// Note that if TargetLimit is higher that value will be taken instead.
	enforcedTargetLimit?: null | uint64 @go(EnforcedTargetLimit,*uint64)
}

// PrometheusRuleExcludeConfig enables users to configure excluded PrometheusRule names and their namespaces
// to be ignored while enforcing namespace label for alerts and metrics.
#PrometheusRuleExcludeConfig: {
	// RuleNamespace - namespace of excluded rule
	ruleNamespace: string @go(RuleNamespace)

	// RuleNamespace - name of excluded rule
	ruleName: string @go(RuleName)
}

// ArbitraryFSAccessThroughSMsConfig enables users to configure, whether
// a service monitor selected by the Prometheus instance is allowed to use
// arbitrary files on the file system of the Prometheus container. This is the case
// when e.g. a service monitor specifies a BearerTokenFile in an endpoint. A
// malicious user could create a service monitor selecting arbitrary secret files
// in the Prometheus container. Those secrets would then be sent with a scrape
// request by Prometheus to a malicious target. Denying the above would prevent the
// attack, users can instead use the BearerTokenSecret field.
#ArbitraryFSAccessThroughSMsConfig: {
	deny?: bool @go(Deny)
}

// PrometheusStatus is the most recent observed status of the Prometheus cluster. Read-only. Not
// included when requesting from the apiserver, only from the Prometheus
// Operator API itself. More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
// +k8s:openapi-gen=true
#PrometheusStatus: {
	// Represents whether any actions on the underlying managed objects are
	// being performed. Only delete actions will be performed.
	paused: bool @go(Paused)

	// Total number of non-terminated pods targeted by this Prometheus deployment
	// (their labels match the selector).
	replicas: int32 @go(Replicas)

	// Total number of non-terminated pods targeted by this Prometheus deployment
	// that have the desired version spec.
	updatedReplicas: int32 @go(UpdatedReplicas)

	// Total number of available pods (ready for at least minReadySeconds)
	// targeted by this Prometheus deployment.
	availableReplicas: int32 @go(AvailableReplicas)

	// Total number of unavailable pods targeted by this Prometheus deployment.
	unavailableReplicas: int32 @go(UnavailableReplicas)
}

// AlertingSpec defines parameters for alerting configuration of Prometheus servers.
// +k8s:openapi-gen=true
#AlertingSpec: {
	// AlertmanagerEndpoints Prometheus should fire alerts against.
	alertmanagers: [...#AlertmanagerEndpoints] @go(Alertmanagers,[]AlertmanagerEndpoints)
}

// StorageSpec defines the configured storage for a group Prometheus servers.
// If neither `emptyDir` nor `volumeClaimTemplate` is specified, then by default an [EmptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) will be used.
// +k8s:openapi-gen=true
#StorageSpec: {
	// Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary.
	// DisableMountSubPath allows to remove any subPath usage in volume mounts.
	disableMountSubPath?: bool @go(DisableMountSubPath)

	// EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More
	// info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
	emptyDir?: null | v1.#EmptyDirVolumeSource @go(EmptyDir,*v1.EmptyDirVolumeSource)

	// A PVC spec to be used by the Prometheus StatefulSets.
	volumeClaimTemplate?: #EmbeddedPersistentVolumeClaim @go(VolumeClaimTemplate)
}

// EmbeddedPersistentVolumeClaim is an embedded version of k8s.io/api/core/v1.PersistentVolumeClaim.
// It contains TypeMeta and a reduced ObjectMeta.
#EmbeddedPersistentVolumeClaim: {
	metav1.#TypeMeta

	// EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
	metadata?: #EmbeddedObjectMetadata @go(EmbeddedObjectMetadata) @protobuf(1,bytes,opt)

	// Spec defines the desired characteristics of a volume requested by a pod author.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	// +optional
	spec?: v1.#PersistentVolumeClaimSpec @go(Spec) @protobuf(2,bytes,opt)

	// Status represents the current information/status of a persistent volume claim.
	// Read-only.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	// +optional
	status?: v1.#PersistentVolumeClaimStatus @go(Status) @protobuf(3,bytes,opt)
}

// EmbeddedObjectMetadata contains a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta
// Only fields which are relevant to embedded resources are included.
#EmbeddedObjectMetadata: {
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	// +optional
	name?: string @go(Name) @protobuf(1,bytes,opt)

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string) @protobuf(11,bytes,rep)

	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	// +optional
	annotations?: {[string]: string} @go(Annotations,map[string]string) @protobuf(12,bytes,rep)
}

// QuerySpec defines the query command line flags when starting Prometheus.
// +k8s:openapi-gen=true
#QuerySpec: {
	// The delta difference allowed for retrieving metrics during expression evaluations.
	lookbackDelta?: null | string @go(LookbackDelta,*string)

	// Number of concurrent queries that can be run at once.
	maxConcurrency?: null | int32 @go(MaxConcurrency,*int32)

	// Maximum number of samples a single query can load into memory. Note that queries will fail if they would load more samples than this into memory, so this also limits the number of samples a query can return.
	maxSamples?: null | int32 @go(MaxSamples,*int32)

	// Maximum time a query may take before being aborted.
	timeout?: null | string @go(Timeout,*string)
}

// WebSpec defines the query command line flags when starting Prometheus.
// +k8s:openapi-gen=true
#WebSpec: {
	// The prometheus web page title
	pageTitle?: null | string @go(PageTitle,*string)
}

// ThanosSpec defines parameters for a Prometheus server within a Thanos deployment.
// +k8s:openapi-gen=true
#ThanosSpec: {
	// Image if specified has precedence over baseImage, tag and sha
	// combinations. Specifying the version is still necessary to ensure the
	// Prometheus Operator knows what version of Thanos is being
	// configured.
	image?: null | string @go(Image,*string)

	// Version describes the version of Thanos to use.
	version?: null | string @go(Version,*string)

	// Tag of Thanos sidecar container image to be deployed. Defaults to the value of `version`.
	// Version is ignored if Tag is set.
	// Deprecated: use 'image' instead.  The image tag can be specified
	// as part of the image URL.
	tag?: null | string @go(Tag,*string)

	// SHA of Thanos container image to be deployed. Defaults to the value of `version`.
	// Similar to a tag, but the SHA explicitly deploys an immutable container image.
	// Version and Tag are ignored if SHA is set.
	// Deprecated: use 'image' instead.  The image digest can be specified
	// as part of the image URL.
	sha?: null | string @go(SHA,*string)

	// Thanos base image if other than default.
	// Deprecated: use 'image' instead
	baseImage?: null | string @go(BaseImage,*string)

	// Resources defines the resource requirements for the Thanos sidecar.
	// If not provided, no requests/limits will be set
	resources?: v1.#ResourceRequirements @go(Resources)

	// ObjectStorageConfig configures object storage in Thanos.
	// Alternative to ObjectStorageConfigFile, and lower order priority.
	objectStorageConfig?: null | v1.#SecretKeySelector @go(ObjectStorageConfig,*v1.SecretKeySelector)

	// ObjectStorageConfigFile specifies the path of the object storage configuration file.
	// When used alongside with ObjectStorageConfig, ObjectStorageConfigFile takes precedence.
	objectStorageConfigFile?: null | string @go(ObjectStorageConfigFile,*string)

	// ListenLocal makes the Thanos sidecar listen on loopback, so that it
	// does not bind against the Pod IP.
	listenLocal?: bool @go(ListenLocal)

	// TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way.
	tracingConfig?: null | v1.#SecretKeySelector @go(TracingConfig,*v1.SecretKeySelector)

	// TracingConfig specifies the path of the tracing configuration file.
	// When used alongside with TracingConfig, TracingConfigFile takes precedence.
	tracingConfigFile?: string @go(TracingConfigFile)

	// GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads
	// recorded rule data.
	// Note: Currently only the CAFile, CertFile, and KeyFile fields are supported.
	// Maps to the '--grpc-server-tls-*' CLI args.
	grpcServerTlsConfig?: null | #TLSConfig @go(GRPCServerTLSConfig,*TLSConfig)

	// LogLevel for Thanos sidecar to be configured with.
	logLevel?: string @go(LogLevel)

	// LogFormat for Thanos sidecar to be configured with.
	logFormat?: string @go(LogFormat)

	// MinTime for Thanos sidecar to be configured with. Option can be a constant time in RFC3339 format or time duration relative to current time, such as -1d or 2h45m. Valid duration units are ms, s, m, h, d, w, y.
	minTime?: string @go(MinTime)
}

// RemoteWriteSpec defines the remote_write configuration for prometheus.
// +k8s:openapi-gen=true
#RemoteWriteSpec: {
	// The URL of the endpoint to send samples to.
	url: string @go(URL)

	// The name of the remote write queue, must be unique if specified. The
	// name is used in metrics and logging in order to differentiate queues.
	// Only valid in Prometheus versions 2.15.0 and newer.
	name?: string @go(Name)

	// Timeout for requests to the remote write endpoint.
	remoteTimeout?: string @go(RemoteTimeout)

	// Custom HTTP headers to be sent along with each remote write request.
	// Be aware that headers that are set by Prometheus itself can't be overwritten.
	// Only valid in Prometheus versions 2.25.0 and newer.
	headers?: {[string]: string} @go(Headers,map[string]string)

	// The list of remote write relabel configurations.
	writeRelabelConfigs?: [...#RelabelConfig] @go(WriteRelabelConfigs,[]RelabelConfig)

	//BasicAuth for the URL.
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// File to read bearer token for remote write.
	bearerToken?: string @go(BearerToken)

	// File to read bearer token for remote write.
	bearerTokenFile?: string @go(BearerTokenFile)

	// TLS Config to use for remote write.
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// Optional ProxyURL
	proxyUrl?: string @go(ProxyURL)

	// QueueConfig allows tuning of the remote write queue parameters.
	queueConfig?: null | #QueueConfig @go(QueueConfig,*QueueConfig)
}

// QueueConfig allows the tuning of remote_write queue_config parameters. This object
// is referenced in the RemoteWriteSpec object.
// +k8s:openapi-gen=true
#QueueConfig: {
	// Capacity is the number of samples to buffer per shard before we start dropping them.
	capacity?: int @go(Capacity)

	// MinShards is the minimum number of shards, i.e. amount of concurrency.
	minShards?: int @go(MinShards)

	// MaxShards is the maximum number of shards, i.e. amount of concurrency.
	maxShards?: int @go(MaxShards)

	// MaxSamplesPerSend is the maximum number of samples per send.
	maxSamplesPerSend?: int @go(MaxSamplesPerSend)

	// BatchSendDeadline is the maximum time a sample will wait in buffer.
	batchSendDeadline?: string @go(BatchSendDeadline)

	// MaxRetries is the maximum number of times to retry a batch on recoverable errors.
	maxRetries?: int @go(MaxRetries)

	// MinBackoff is the initial retry delay. Gets doubled for every retry.
	minBackoff?: string @go(MinBackoff)

	// MaxBackoff is the maximum retry delay.
	maxBackoff?: string @go(MaxBackoff)
}

// RemoteReadSpec defines the remote_read configuration for prometheus.
// +k8s:openapi-gen=true
#RemoteReadSpec: {
	// The URL of the endpoint to send samples to.
	url: string @go(URL)

	// The name of the remote read queue, must be unique if specified. The name
	// is used in metrics and logging in order to differentiate read
	// configurations.  Only valid in Prometheus versions 2.15.0 and newer.
	name?: string @go(Name)

	// An optional list of equality matchers which have to be present
	// in a selector to query the remote read endpoint.
	requiredMatchers?: {[string]: string} @go(RequiredMatchers,map[string]string)

	// Timeout for requests to the remote read endpoint.
	remoteTimeout?: string @go(RemoteTimeout)

	// Whether reads should be made for queries for time ranges that
	// the local storage should have complete data for.
	readRecent?: bool @go(ReadRecent)

	// BasicAuth for the URL.
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// bearer token for remote read.
	bearerToken?: string @go(BearerToken)

	// File to read bearer token for remote read.
	bearerTokenFile?: string @go(BearerTokenFile)

	// TLS Config to use for remote read.
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// Optional ProxyURL
	proxyUrl?: string @go(ProxyURL)
}

// RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion.
// It defines `<metric_relabel_configs>`-section of Prometheus configuration.
// More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
// +k8s:openapi-gen=true
#RelabelConfig: {
	//The source labels select values from existing labels. Their content is concatenated
	//using the configured separator and matched against the configured regular expression
	//for the replace, keep, and drop actions.
	sourceLabels?: [...string] @go(SourceLabels,[]string)

	//Separator placed between concatenated source label values. default is ';'.
	separator?: string @go(Separator)

	//Label to which the resulting value is written in a replace action.
	//It is mandatory for replace actions. Regex capture groups are available.
	targetLabel?: string @go(TargetLabel)

	//Regular expression against which the extracted value is matched. Default is '(.*)'
	regex?: string @go(Regex)

	// Modulus to take of the hash of the source label values.
	modulus?: uint64 @go(Modulus)

	//Replacement value against which a regex replace is performed if the
	//regular expression matches. Regex capture groups are available. Default is '$1'
	replacement?: string @go(Replacement)

	// Action to perform based on regex matching. Default is 'replace'
	action?: string @go(Action)
}

// APIServerConfig defines a host and auth methods to access apiserver.
// More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config
// +k8s:openapi-gen=true
#APIServerConfig: {
	// Host of apiserver.
	// A valid string consisting of a hostname or IP followed by an optional port number
	host: string @go(Host)

	// BasicAuth allow an endpoint to authenticate over basic authentication
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// Bearer token for accessing apiserver.
	bearerToken?: string @go(BearerToken)

	// File to read bearer token for accessing apiserver.
	bearerTokenFile?: string @go(BearerTokenFile)

	// TLS Config to use for accessing apiserver.
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)
}

// AlertmanagerEndpoints defines a selection of a single Endpoints object
// containing alertmanager IPs to fire alerts against.
// +k8s:openapi-gen=true
#AlertmanagerEndpoints: {
	// Namespace of Endpoints object.
	namespace: string @go(Namespace)

	// Name of Endpoints object in Namespace.
	name: string @go(Name)

	// Port the Alertmanager API is exposed on.
	port: intstr.#IntOrString @go(Port)

	// Scheme to use when firing alerts.
	scheme?: string @go(Scheme)

	// Prefix for the HTTP path alerts are pushed to.
	pathPrefix?: string @go(PathPrefix)

	// TLS Config to use for alertmanager connection.
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// BearerTokenFile to read from filesystem to use when authenticating to
	// Alertmanager.
	bearerTokenFile?: string @go(BearerTokenFile)

	// Version of the Alertmanager API that Prometheus uses to send alerts. It
	// can be "v1" or "v2".
	apiVersion?: string @go(APIVersion)

	// Timeout is a per-target Alertmanager timeout when pushing alerts.
	timeout?: null | string @go(Timeout,*string)
}

// ServiceMonitor defines monitoring for a set of services.
// +genclient
// +k8s:openapi-gen=true
// +kubebuilder:resource:categories="prometheus-operator"
#ServiceMonitor: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Specification of desired Service selection for target discovery by
	// Prometheus.
	spec: #ServiceMonitorSpec @go(Spec)
}

// ServiceMonitorSpec contains specification parameters for a ServiceMonitor.
// +k8s:openapi-gen=true
#ServiceMonitorSpec: {
	// The label to use to retrieve the job name from.
	jobLabel?: string @go(JobLabel)

	// TargetLabels transfers labels on the Kubernetes Service onto the target.
	targetLabels?: [...string] @go(TargetLabels,[]string)

	// PodTargetLabels transfers labels on the Kubernetes Pod onto the target.
	podTargetLabels?: [...string] @go(PodTargetLabels,[]string)

	// A list of endpoints allowed as part of this ServiceMonitor.
	endpoints: [...#Endpoint] @go(Endpoints,[]Endpoint)

	// Selector to select Endpoints objects.
	selector: metav1.#LabelSelector @go(Selector)

	// Selector to select which namespaces the Endpoints objects are discovered from.
	namespaceSelector?: #NamespaceSelector @go(NamespaceSelector)

	// SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
	sampleLimit?: uint64 @go(SampleLimit)

	// TargetLimit defines a limit on the number of scraped targets that will be accepted.
	targetLimit?: uint64 @go(TargetLimit)
}

// Endpoint defines a scrapeable endpoint serving Prometheus metrics.
// +k8s:openapi-gen=true
#Endpoint: {
	// Name of the service port this endpoint refers to. Mutually exclusive with targetPort.
	port?: string @go(Port)

	// Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port.
	targetPort?: null | intstr.#IntOrString @go(TargetPort,*intstr.IntOrString)

	// HTTP path to scrape for metrics.
	path?: string @go(Path)

	// HTTP scheme to use for scraping.
	scheme?: string @go(Scheme)

	// Optional HTTP URL parameters
	params?: {[string]: [...string]} @go(Params,map[string][]string)

	// Interval at which metrics should be scraped
	interval?: string @go(Interval)

	// Timeout after which the scrape is ended
	scrapeTimeout?: string @go(ScrapeTimeout)

	// TLS configuration to use when scraping the endpoint
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// File to read bearer token for scraping targets.
	bearerTokenFile?: string @go(BearerTokenFile)

	// Secret to mount to read bearer token for scraping targets. The secret
	// needs to be in the same namespace as the service monitor and accessible by
	// the Prometheus Operator.
	bearerTokenSecret?: v1.#SecretKeySelector @go(BearerTokenSecret)

	// HonorLabels chooses the metric's labels on collisions with target labels.
	honorLabels?: bool @go(HonorLabels)

	// HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.
	honorTimestamps?: null | bool @go(HonorTimestamps,*bool)

	// BasicAuth allow an endpoint to authenticate over basic authentication
	// More info: https://prometheus.io/docs/operating/configuration/#endpoints
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// MetricRelabelConfigs to apply to samples before ingestion.
	metricRelabelings?: [...null | #RelabelConfig] @go(MetricRelabelConfigs,[]*RelabelConfig)

	// RelabelConfigs to apply to samples before scraping.
	// More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
	relabelings?: [...null | #RelabelConfig] @go(RelabelConfigs,[]*RelabelConfig)

	// ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
	proxyUrl?: null | string @go(ProxyURL,*string)
}

// PodMonitor defines monitoring for a set of pods.
// +genclient
// +k8s:openapi-gen=true
// +kubebuilder:resource:categories="prometheus-operator"
#PodMonitor: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Specification of desired Pod selection for target discovery by Prometheus.
	spec: #PodMonitorSpec @go(Spec)
}

// PodMonitorSpec contains specification parameters for a PodMonitor.
// +k8s:openapi-gen=true
#PodMonitorSpec: {
	// The label to use to retrieve the job name from.
	jobLabel?: string @go(JobLabel)

	// PodTargetLabels transfers labels on the Kubernetes Pod onto the target.
	podTargetLabels?: [...string] @go(PodTargetLabels,[]string)

	// A list of endpoints allowed as part of this PodMonitor.
	podMetricsEndpoints: [...#PodMetricsEndpoint] @go(PodMetricsEndpoints,[]PodMetricsEndpoint)

	// Selector to select Pod objects.
	selector: metav1.#LabelSelector @go(Selector)

	// Selector to select which namespaces the Endpoints objects are discovered from.
	namespaceSelector?: #NamespaceSelector @go(NamespaceSelector)

	// SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
	sampleLimit?: uint64 @go(SampleLimit)

	// TargetLimit defines a limit on the number of scraped targets that will be accepted.
	targetLimit?: uint64 @go(TargetLimit)
}

// PodMetricsEndpoint defines a scrapeable endpoint of a Kubernetes Pod serving Prometheus metrics.
// +k8s:openapi-gen=true
#PodMetricsEndpoint: {
	// Name of the pod port this endpoint refers to. Mutually exclusive with targetPort.
	port?: string @go(Port)

	// Deprecated: Use 'port' instead.
	targetPort?: null | intstr.#IntOrString @go(TargetPort,*intstr.IntOrString)

	// HTTP path to scrape for metrics.
	path?: string @go(Path)

	// HTTP scheme to use for scraping.
	scheme?: string @go(Scheme)

	// Optional HTTP URL parameters
	params?: {[string]: [...string]} @go(Params,map[string][]string)

	// Interval at which metrics should be scraped
	interval?: string @go(Interval)

	// Timeout after which the scrape is ended
	scrapeTimeout?: string @go(ScrapeTimeout)

	// TLS configuration to use when scraping the endpoint.
	tlsConfig?: null | #PodMetricsEndpointTLSConfig @go(TLSConfig,*PodMetricsEndpointTLSConfig)

	// Secret to mount to read bearer token for scraping targets. The secret
	// needs to be in the same namespace as the pod monitor and accessible by
	// the Prometheus Operator.
	bearerTokenSecret?: v1.#SecretKeySelector @go(BearerTokenSecret)

	// HonorLabels chooses the metric's labels on collisions with target labels.
	honorLabels?: bool @go(HonorLabels)

	// HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.
	honorTimestamps?: null | bool @go(HonorTimestamps,*bool)

	// BasicAuth allow an endpoint to authenticate over basic authentication.
	// More info: https://prometheus.io/docs/operating/configuration/#endpoint
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// MetricRelabelConfigs to apply to samples before ingestion.
	metricRelabelings?: [...null | #RelabelConfig] @go(MetricRelabelConfigs,[]*RelabelConfig)

	// RelabelConfigs to apply to samples before ingestion.
	// More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
	relabelings?: [...null | #RelabelConfig] @go(RelabelConfigs,[]*RelabelConfig)

	// ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
	proxyUrl?: null | string @go(ProxyURL,*string)
}

// PodMetricsEndpointTLSConfig specifies TLS configuration parameters.
// +k8s:openapi-gen=true
#PodMetricsEndpointTLSConfig: {
	#SafeTLSConfig
}

// Probe defines monitoring for a set of static targets or ingresses.
// +genclient
// +k8s:openapi-gen=true
// +kubebuilder:resource:categories="prometheus-operator"
#Probe: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Specification of desired Ingress selection for target discovery by Prometheus.
	spec: #ProbeSpec @go(Spec)
}

// ProbeSpec contains specification parameters for a Probe.
// +k8s:openapi-gen=true
#ProbeSpec: {
	// The job name assigned to scraped metrics by default.
	jobName?: string @go(JobName)

	// Specification for the prober to use for probing targets.
	// The prober.URL parameter is required. Targets cannot be probed if left empty.
	prober?: #ProberSpec @go(ProberSpec)

	// The module to use for probing specifying how to probe the target.
	// Example module configuring in the blackbox exporter:
	// https://github.com/prometheus/blackbox_exporter/blob/master/example.yml
	module?: string @go(Module)

	// Targets defines a set of static and/or dynamically discovered targets to be probed using the prober.
	targets?: #ProbeTargets @go(Targets)

	// Interval at which targets are probed using the configured prober.
	// If not specified Prometheus' global scrape interval is used.
	interval?: string @go(Interval)

	// Timeout for scraping metrics from the Prometheus exporter.
	scrapeTimeout?: string @go(ScrapeTimeout)
}

// ProbeTargets defines a set of static and dynamically discovered targets for the prober.
// +k8s:openapi-gen=true
#ProbeTargets: {
	// StaticConfig defines static targets which are considers for probing.
	// More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config.
	staticConfig?: null | #ProbeTargetStaticConfig @go(StaticConfig,*ProbeTargetStaticConfig)

	// Ingress defines the set of dynamically discovered ingress objects which hosts are considered for probing.
	ingress?: null | #ProbeTargetIngress @go(Ingress,*ProbeTargetIngress)
}

// ProbeTargetStaticConfig defines the set of static targets considered for probing.
// +k8s:openapi-gen=true
#ProbeTargetStaticConfig: {
	// Targets is a list of URLs to probe using the configured prober.
	static?: [...string] @go(Targets,[]string)

	// Labels assigned to all metrics scraped from the targets.
	labels?: {[string]: string} @go(Labels,map[string]string)

	// RelabelConfigs to apply to samples before ingestion.
	// More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
	relabelingConfigs?: [...null | #RelabelConfig] @go(RelabelConfigs,[]*RelabelConfig)
}

// ProbeTargetIngress defines the set of Ingress objects considered for probing.
// +k8s:openapi-gen=true
#ProbeTargetIngress: {
	// Select Ingress objects by labels.
	selector?: metav1.#LabelSelector @go(Selector)

	// Select Ingress objects by namespace.
	namespaceSelector?: #NamespaceSelector @go(NamespaceSelector)

	// RelabelConfigs to apply to samples before ingestion.
	// More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
	relabelingConfigs?: [...null | #RelabelConfig] @go(RelabelConfigs,[]*RelabelConfig)
}

// ProberSpec contains specification parameters for the Prober used for probing.
// +k8s:openapi-gen=true
#ProberSpec: {
	// Mandatory URL of the prober.
	url: string @go(URL)

	// HTTP scheme to use for scraping.
	// Defaults to `http`.
	scheme?: string @go(Scheme)

	// Path to collect metrics from.
	// Defaults to `/probe`.
	path?: string @go(Path)
}

// BasicAuth allow an endpoint to authenticate over basic authentication
// More info: https://prometheus.io/docs/operating/configuration/#endpoints
// +k8s:openapi-gen=true
#BasicAuth: {
	// The secret in the service monitor namespace that contains the username
	// for authentication.
	username?: v1.#SecretKeySelector @go(Username)

	// The secret in the service monitor namespace that contains the password
	// for authentication.
	password?: v1.#SecretKeySelector @go(Password)
}

// SecretOrConfigMap allows to specify data as a Secret or ConfigMap. Fields are mutually exclusive.
#SecretOrConfigMap: {
	// Secret containing data to use for the targets.
	secret?: null | v1.#SecretKeySelector @go(Secret,*v1.SecretKeySelector)

	// ConfigMap containing data to use for the targets.
	configMap?: null | v1.#ConfigMapKeySelector @go(ConfigMap,*v1.ConfigMapKeySelector)
}

// SafeTLSConfig specifies safe TLS configuration parameters.
// +k8s:openapi-gen=true
#SafeTLSConfig: {
	// Struct containing the CA cert to use for the targets.
	ca?: #SecretOrConfigMap @go(CA)

	// Struct containing the client cert file for the targets.
	cert?: #SecretOrConfigMap @go(Cert)

	// Secret containing the client key file for the targets.
	keySecret?: null | v1.#SecretKeySelector @go(KeySecret,*v1.SecretKeySelector)

	// Used to verify the hostname for the targets.
	serverName?: string @go(ServerName)

	// Disable target certificate validation.
	insecureSkipVerify?: bool @go(InsecureSkipVerify)
}

// TLSConfig extends the safe TLS configuration with file parameters.
// +k8s:openapi-gen=true
#TLSConfig: {
	#SafeTLSConfig

	// Path to the CA cert in the Prometheus container to use for the targets.
	caFile?: string @go(CAFile)

	// Path to the client cert file in the Prometheus container for the targets.
	certFile?: string @go(CertFile)

	// Path to the client key file in the Prometheus container for the targets.
	keyFile?: string @go(KeyFile)
}

// ServiceMonitorList is a list of ServiceMonitors.
// +k8s:openapi-gen=true
#ServiceMonitorList: {
	metav1.#TypeMeta

	// Standard list metadata
	// More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata?: metav1.#ListMeta @go(ListMeta)

	// List of ServiceMonitors
	items: [...null | #ServiceMonitor] @go(Items,[]*ServiceMonitor)
}

// PodMonitorList is a list of PodMonitors.
// +k8s:openapi-gen=true
#PodMonitorList: {
	metav1.#TypeMeta

	// Standard list metadata
	// More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata?: metav1.#ListMeta @go(ListMeta)

	// List of PodMonitors
	items: [...null | #PodMonitor] @go(Items,[]*PodMonitor)
}

// ProbeList is a list of Probes.
// +k8s:openapi-gen=true
#ProbeList: {
	metav1.#TypeMeta

	// Standard list metadata
	// More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata?: metav1.#ListMeta @go(ListMeta)

	// List of Probes
	items: [...null | #Probe] @go(Items,[]*Probe)
}

// PrometheusRuleList is a list of PrometheusRules.
// +k8s:openapi-gen=true
#PrometheusRuleList: {
	metav1.#TypeMeta

	// Standard list metadata
	// More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata?: metav1.#ListMeta @go(ListMeta)

	// List of Rules
	items: [...null | #PrometheusRule] @go(Items,[]*PrometheusRule)
}

// PrometheusRule defines recording and alerting rules for a Prometheus instance
// +genclient
// +k8s:openapi-gen=true
#PrometheusRule: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Specification of desired alerting rule definitions for Prometheus.
	spec: #PrometheusRuleSpec @go(Spec)
}

// PrometheusRuleSpec contains specification parameters for a Rule.
// +k8s:openapi-gen=true
#PrometheusRuleSpec: {
	// Content of Prometheus rule file
	groups?: [...#RuleGroup] @go(Groups,[]RuleGroup)
}

// RuleGroup is a list of sequentially evaluated recording and alerting rules.
// Note: PartialResponseStrategy is only used by ThanosRuler and will
// be ignored by Prometheus instances.  Valid values for this field are 'warn'
// or 'abort'.  More info: https://github.com/thanos-io/thanos/blob/master/docs/components/rule.md#partial-response
// +k8s:openapi-gen=true
#RuleGroup: {
	name:      string @go(Name)
	interval?: string @go(Interval)
	rules: [...#Rule] @go(Rules,[]Rule)
	partial_response_strategy?: string @go(PartialResponseStrategy)
}

// Rule describes an alerting or recording rule.
// +k8s:openapi-gen=true
#Rule: {
	record?: string              @go(Record)
	alert?:  string              @go(Alert)
	expr:    intstr.#IntOrString @go(Expr)
	for?:    string              @go(For)
	labels?: {[string]: string} @go(Labels,map[string]string)
	annotations?: {[string]: string} @go(Annotations,map[string]string)
}

// Alertmanager describes an Alertmanager cluster.
// +genclient
// +k8s:openapi-gen=true
// +kubebuilder:resource:categories="prometheus-operator"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version",description="The version of Alertmanager"
// +kubebuilder:printcolumn:name="Replicas",type="integer",JSONPath=".spec.replicas",description="The desired replicas number of Alertmanagers"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
#Alertmanager: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Specification of the desired behavior of the Alertmanager cluster. More info:
	// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	spec: #AlertmanagerSpec @go(Spec)

	// Most recent observed status of the Alertmanager cluster. Read-only. Not
	// included when requesting from the apiserver, only from the Prometheus
	// Operator API itself. More info:
	// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	status?: null | #AlertmanagerStatus @go(Status,*AlertmanagerStatus)
}

// AlertmanagerSpec is a specification of the desired behavior of the Alertmanager cluster. More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
// +k8s:openapi-gen=true
#AlertmanagerSpec: {
	// PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
	podMetadata?: null | #EmbeddedObjectMetadata @go(PodMetadata,*EmbeddedObjectMetadata)

	// Image if specified has precedence over baseImage, tag and sha
	// combinations. Specifying the version is still necessary to ensure the
	// Prometheus Operator knows what version of Alertmanager is being
	// configured.
	image?: null | string @go(Image,*string)

	// Version the cluster should be on.
	version?: string @go(Version)

	// Tag of Alertmanager container image to be deployed. Defaults to the value of `version`.
	// Version is ignored if Tag is set.
	// Deprecated: use 'image' instead.  The image tag can be specified
	// as part of the image URL.
	tag?: string @go(Tag)

	// SHA of Alertmanager container image to be deployed. Defaults to the value of `version`.
	// Similar to a tag, but the SHA explicitly deploys an immutable container image.
	// Version and Tag are ignored if SHA is set.
	// Deprecated: use 'image' instead.  The image digest can be specified
	// as part of the image URL.
	sha?: string @go(SHA)

	// Base image that is used to deploy pods, without tag.
	// Deprecated: use 'image' instead
	baseImage?: string @go(BaseImage)

	// An optional list of references to secrets in the same namespace
	// to use for pulling prometheus and alertmanager images from registries
	// see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
	imagePullSecrets?: [...v1.#LocalObjectReference] @go(ImagePullSecrets,[]v1.LocalObjectReference)

	// Secrets is a list of Secrets in the same namespace as the Alertmanager
	// object, which shall be mounted into the Alertmanager Pods.
	// The Secrets are mounted into /etc/alertmanager/secrets/<secret-name>.
	secrets?: [...string] @go(Secrets,[]string)

	// ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager
	// object, which shall be mounted into the Alertmanager Pods.
	// The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name>.
	configMaps?: [...string] @go(ConfigMaps,[]string)

	// ConfigSecret is the name of a Kubernetes Secret in the same namespace as the
	// Alertmanager object, which contains configuration for this Alertmanager
	// instance. Defaults to 'alertmanager-<alertmanager-name>'
	// The secret is mounted into /etc/alertmanager/config.
	configSecret?: string @go(ConfigSecret)

	// Log level for Alertmanager to be configured with.
	logLevel?: string @go(LogLevel)

	// Log format for Alertmanager to be configured with.
	logFormat?: string @go(LogFormat)

	// Size is the expected size of the alertmanager cluster. The controller will
	// eventually make the size of the running cluster equal to the expected
	// size.
	replicas?: null | int32 @go(Replicas,*int32)

	// Time duration Alertmanager shall retain data for. Default is '120h',
	// and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).
	retention?: string @go(Retention)

	// Storage is the definition of how storage will be used by the Alertmanager
	// instances.
	storage?: null | #StorageSpec @go(Storage,*StorageSpec)

	// Volumes allows configuration of additional volumes on the output StatefulSet definition.
	// Volumes specified will be appended to other volumes that are generated as a result of
	// StorageSpec objects.
	volumes?: [...v1.#Volume] @go(Volumes,[]v1.Volume)

	// VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition.
	// VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container,
	// that are generated as a result of StorageSpec objects.
	volumeMounts?: [...v1.#VolumeMount] @go(VolumeMounts,[]v1.VolumeMount)

	// The external URL the Alertmanager instances will be available under. This is
	// necessary to generate correct URLs. This is necessary if Alertmanager is not
	// served from root of a DNS name.
	externalUrl?: string @go(ExternalURL)

	// The route prefix Alertmanager registers HTTP handlers for. This is useful,
	// if using ExternalURL and a proxy is rewriting HTTP routes of a request,
	// and the actual ExternalURL is still true, but the server serves requests
	// under a different route prefix. For example for use with `kubectl proxy`.
	routePrefix?: string @go(RoutePrefix)

	// If set to true all actions on the underlying managed objects are not
	// goint to be performed, except for delete actions.
	paused?: bool @go(Paused)

	// Define which Nodes the Pods are scheduled on.
	nodeSelector?: {[string]: string} @go(NodeSelector,map[string]string)

	// Define resources requests and limits for single Pods.
	resources?: v1.#ResourceRequirements @go(Resources)

	// If specified, the pod's scheduling constraints.
	affinity?: null | v1.#Affinity @go(Affinity,*v1.Affinity)

	// If specified, the pod's tolerations.
	tolerations?: [...v1.#Toleration] @go(Tolerations,[]v1.Toleration)

	// If specified, the pod's topology spread constraints.
	topologySpreadConstraints?: [...v1.#TopologySpreadConstraint] @go(TopologySpreadConstraints,[]v1.TopologySpreadConstraint)

	// SecurityContext holds pod-level security attributes and common container settings.
	// This defaults to the default PodSecurityContext.
	securityContext?: null | v1.#PodSecurityContext @go(SecurityContext,*v1.PodSecurityContext)

	// ServiceAccountName is the name of the ServiceAccount to use to run the
	// Prometheus Pods.
	serviceAccountName?: string @go(ServiceAccountName)

	// ListenLocal makes the Alertmanager server listen on loopback, so that it
	// does not bind against the Pod IP. Note this is only for the Alertmanager
	// UI, not the gossip communication.
	listenLocal?: bool @go(ListenLocal)

	// Containers allows injecting additional containers. This is meant to
	// allow adding an authentication proxy to an Alertmanager pod.
	// Containers described here modify an operator generated container if they
	// share the same name and modifications are done via a strategic merge
	// patch. The current container names are: `alertmanager` and
	// `config-reloader`. Overriding containers is entirely outside the scope
	// of what the maintainers will support and by doing so, you accept that
	// this behaviour may break at any time without notice.
	containers?: [...v1.#Container] @go(Containers,[]v1.Container)

	// InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.
	// fetch secrets for injection into the Alertmanager configuration from external sources. Any
	// errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	// Using initContainers for any use case other then secret fetching is entirely outside the scope
	// of what the maintainers will support and by doing so, you accept that this behaviour may break
	// at any time without notice.
	initContainers?: [...v1.#Container] @go(InitContainers,[]v1.Container)

	// Priority class assigned to the Pods
	priorityClassName?: string @go(PriorityClassName)

	// AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.
	additionalPeers?: [...string] @go(AdditionalPeers,[]string)

	// ClusterAdvertiseAddress is the explicit address to advertise in cluster.
	// Needs to be provided for non RFC1918 [1] (public) addresses.
	// [1] RFC1918: https://tools.ietf.org/html/rfc1918
	clusterAdvertiseAddress?: string @go(ClusterAdvertiseAddress)

	// Interval between gossip attempts.
	clusterGossipInterval?: string @go(ClusterGossipInterval)

	// Interval between pushpull attempts.
	clusterPushpullInterval?: string @go(ClusterPushpullInterval)

	// Timeout for cluster peering.
	clusterPeerTimeout?: string @go(ClusterPeerTimeout)

	// Port name used for the pods and governing service.
	// This defaults to web
	portName?: string @go(PortName)

	// ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica.
	// Use case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.
	forceEnableClusterMode?: bool @go(ForceEnableClusterMode)

	// AlertmanagerConfigs to be selected for to merge and configure Alertmanager with.
	alertmanagerConfigSelector?: null | metav1.#LabelSelector @go(AlertmanagerConfigSelector,*metav1.LabelSelector)

	// Namespaces to be selected for AlertmanagerConfig discovery. If nil, only
	// check own namespace.
	alertmanagerConfigNamespaceSelector?: null | metav1.#LabelSelector @go(AlertmanagerConfigNamespaceSelector,*metav1.LabelSelector)
}

// AlertmanagerList is a list of Alertmanagers.
// +k8s:openapi-gen=true
#AlertmanagerList: {
	metav1.#TypeMeta

	// Standard list metadata
	// More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
	metadata?: metav1.#ListMeta @go(ListMeta)

	// List of Alertmanagers
	items: [...#Alertmanager] @go(Items,[]Alertmanager)
}

// AlertmanagerStatus is the most recent observed status of the Alertmanager cluster. Read-only. Not
// included when requesting from the apiserver, only from the Prometheus
// Operator API itself. More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
// +k8s:openapi-gen=true
#AlertmanagerStatus: {
	// Represents whether any actions on the underlying managed objects are
	// being performed. Only delete actions will be performed.
	paused: bool @go(Paused)

	// Total number of non-terminated pods targeted by this Alertmanager
	// cluster (their labels match the selector).
	replicas: int32 @go(Replicas)

	// Total number of non-terminated pods targeted by this Alertmanager
	// cluster that have the desired version spec.
	updatedReplicas: int32 @go(UpdatedReplicas)

	// Total number of available pods (ready for at least minReadySeconds)
	// targeted by this Alertmanager cluster.
	availableReplicas: int32 @go(AvailableReplicas)

	// Total number of unavailable pods targeted by this Alertmanager cluster.
	unavailableReplicas: int32 @go(UnavailableReplicas)
}

// NamespaceSelector is a selector for selecting either all namespaces or a
// list of namespaces.
// +k8s:openapi-gen=true
#NamespaceSelector: {
	// Boolean describing whether all namespaces are selected in contrast to a
	// list restricting them.
	any?: bool @go(Any)

	// List of namespace names.
	matchNames?: [...string] @go(MatchNames,[]string)
}

// /--rules.*/ command-line arguments
// +k8s:openapi-gen=true
#Rules: {
	alert?: #RulesAlert @go(Alert)
}

// /--rules.alert.*/ command-line arguments
// +k8s:openapi-gen=true
#RulesAlert: {
	// Max time to tolerate prometheus outage for restoring 'for' state of alert.
	forOutageTolerance?: string @go(ForOutageTolerance)

	// Minimum duration between alert and restored 'for' state.
	// This is maintained only for alerts with configured 'for' time greater than grace period.
	forGracePeriod?: string @go(ForGracePeriod)

	// Minimum amount of time to wait before resending an alert to Alertmanager.
	resendDelay?: string @go(ResendDelay)
}
