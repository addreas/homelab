// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana/agent/pkg/operator/apis/monitoring/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	prom_v1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	"k8s.io/api/core/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// GrafanaAgent defines a Grafana Agent deployment.
#GrafanaAgent: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec holds the specification of the desired behavior for the Grafana Agent
	// cluster.
	spec?: #GrafanaAgentSpec @go(Spec)
}

// GrafanaAgentList is a list of GrafanaAgents.
#GrafanaAgentList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)

	// Items is the list of GrafanaAgents.
	items: [...null | #GrafanaAgent] @go(Items,[]*GrafanaAgent)
}

// GrafanaAgentSpec is a specification of the desired behavior of the Grafana
// Agent cluster.
#GrafanaAgentSpec: {
	// LogLevel controls the log level of the generated pods. Defaults to "info" if not set.
	logLevel?: string @go(LogLevel)

	// LogFormat controls the logging format of the generated pods. Defaults to "logfmt" if not set.
	logFormat?: string @go(LogFormat)

	// APIServerConfig lets you specify a host and auth methods to access the
	// Kubernetes API server. If left empty, the Agent assumes that it is
	// running inside of the cluster and will discover API servers automatically
	// and use the pod's CA certificate and bearer token file at
	// /var/run/secrets/kubernetes.io/serviceaccount.
	apiServer?: null | prom_v1.#APIServerConfig @go(APIServerConfig,*prom_v1.APIServerConfig)

	// PodMetadata configures Labels and Annotations which are propagated to
	// created Grafana Agent pods.
	podMetadata?: null | prom_v1.#EmbeddedObjectMetadata @go(PodMetadata,*prom_v1.EmbeddedObjectMetadata)

	// Version of Grafana Agent to be deployed.
	version?: string @go(Version)

	// Paused prevents actions except for deletion to be performed on the
	// underlying managed objects.
	paused?: bool @go(Paused)

	// Image, when specified, overrides the image used to run Agent. Specify
	// the image along with a tag. You still need to set the version to ensure
	// Grafana Agent Operator knows which version of Grafana Agent is being
	// configured.
	image?: null | string @go(Image,*string)

	// ImagePullSecrets holds an optional list of references to Secrets within
	// the same namespace used for pulling the Grafana Agent image from
	// registries.
	// More info: https://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
	imagePullSecrets?: [...v1.#LocalObjectReference] @go(ImagePullSecrets,[]v1.LocalObjectReference)

	// Storage spec to specify how storage will be used.
	storage?: null | prom_v1.#StorageSpec @go(Storage,*prom_v1.StorageSpec)

	// Volumes allows configuration of additional volumes on the output
	// StatefulSet definition. The volumes specified are appended to other
	// volumes that are generated as a result of StorageSpec objects.
	volumes?: [...v1.#Volume] @go(Volumes,[]v1.Volume)

	// VolumeMounts lets you configure additional VolumeMounts on the output
	// StatefulSet definition. Specified VolumeMounts are appended to other
	// VolumeMounts generated as a result of StorageSpec objects
	// in the Grafana Agent container.
	volumeMounts?: [...v1.#VolumeMount] @go(VolumeMounts,[]v1.VolumeMount)

	// Resources holds requests and limits for individual pods.
	resources?: v1.#ResourceRequirements @go(Resources)

	// NodeSelector defines which nodes pods should be scheduling on.
	nodeSelector?: {[string]: string} @go(NodeSelector,map[string]string)

	// ServiceAccountName is the name of the ServiceAccount to use for running Grafana Agent pods.
	serviceAccountName?: string @go(ServiceAccountName)

	// Secrets is a list of secrets in the same namespace as the GrafanaAgent
	// object which will be mounted into each running Grafana Agent pod.
	// The secrets are mounted into /etc/grafana-agent/extra-secrets/<secret-name>.
	secrets?: [...string] @go(Secrets,[]string)

	// ConfigMaps is a list of config maps in the same namespace as the
	// GrafanaAgent object which will be mounted into each running Grafana Agent
	// pod.
	// The ConfigMaps are mounted into /etc/grafana-agent/extra-configmaps/<configmap-name>.
	configMaps?: [...string] @go(ConfigMaps,[]string)

	// Affinity, if specified, controls pod scheduling constraints.
	affinity?: null | v1.#Affinity @go(Affinity,*v1.Affinity)

	// Tolerations, if specified, controls the pod's tolerations.
	tolerations?: [...v1.#Toleration] @go(Tolerations,[]v1.Toleration)

	// TopologySpreadConstraints, if specified, controls the pod's topology spread constraints.
	topologySpreadConstraints?: [...v1.#TopologySpreadConstraint] @go(TopologySpreadConstraints,[]v1.TopologySpreadConstraint)

	// SecurityContext holds pod-level security attributes and common container
	// settings. When unspecified, defaults to the default PodSecurityContext.
	securityContext?: null | v1.#PodSecurityContext @go(SecurityContext,*v1.PodSecurityContext)

	// Containers lets you inject additional containers or modify operator-generated
	// containers. This can be used to add an authentication
	// proxy to a Grafana Agent pod or to change the behavior of an
	// operator-generated container. Containers described here modify an
	// operator-generated container if they share the same name and if modifications are done
	// via a strategic merge patch. The current container names are:
	// `grafana-agent` and `config-reloader`. Overriding containers is entirely
	// outside the scope of what the Grafana Agent team supports and by doing
	// so, you accept that this behavior may break at any time without notice.
	containers?: [...v1.#Container] @go(Containers,[]v1.Container)

	// InitContainers let you add initContainers to the pod definition. These
	// can be used to, for example, fetch secrets for injection into the Grafana
	// Agent configuration from external sources. Errors during the execution
	// of an initContainer cause the pod to restart.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	// Using initContainers for any use case other than secret fetching is
	// entirely outside the scope of what the Grafana Agent maintainers
	// support and by doing so, you accept that this behavior may break at any
	// time without notice.
	initContainers?: [...v1.#Container] @go(InitContainers,[]v1.Container)

	// PriorityClassName is the priority class assigned to pods.
	priorityClassName?: string @go(PriorityClassName)

	// Port name used for the pods and governing service. This defaults to agent-metrics.
	portName?: string @go(PortName)

	// Metrics controls the metrics subsystem of the Agent and settings
	// unique to metrics-specific pods that are deployed.
	metrics?: #MetricsSubsystemSpec @go(Metrics)

	// Logs controls the logging subsystem of the Agent and settings unique to
	// logging-specific pods that are deployed.
	logs?: #LogsSubsystemSpec @go(Logs)

	// Integrations controls the integration subsystem of the Agent and settings
	// unique to deployed integration-specific pods.
	integrations?: #IntegrationsSubsystemSpec @go(Integrations)

	// enableConfigReadAPI enables the read API for viewing the currently running
	// config port 8080 on the agent.
	// +kubebuilder:default=false
	enableConfigReadAPI?: bool @go(EnableConfigReadAPI)

	// disableReporting disables reporting of enabled feature flags to Grafana.
	// +kubebuilder:default=false
	disableReporting?: bool @go(DisableReporting)

	// disableSupportBundle disables the generation of support bundles.
	// +kubebuilder:default=false
	disableSupportBundle?: bool @go(DisableSupportBundle)
}

// ObjectSelector is a set of selectors to use for finding an object in the
// resource hierarchy. When NamespaceSelector is nil, search for objects
// directly in the ParentNamespace.
#ObjectSelector: {
	ObjectType:         client.#Object
	ParentNamespace:    string
	NamespaceSelector?: null | metav1.#LabelSelector @go(,*metav1.LabelSelector)
	Labels?:            null | metav1.#LabelSelector @go(,*metav1.LabelSelector)
}
