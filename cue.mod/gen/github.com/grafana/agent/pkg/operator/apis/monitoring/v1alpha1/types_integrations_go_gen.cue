// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/grafana/agent/pkg/operator/apis/monitoring/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apiextv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	corev1 "k8s.io/api/core/v1"
)

// IntegrationsSubsystemSpec defines global settings to apply across the
// integrations subsystem.
#IntegrationsSubsystemSpec: {
	// Label selector to find Integration resources to run. When nil, no
	// integration resources will be defined.
	selector?: null | metav1.#LabelSelector @go(Selector,*metav1.LabelSelector)

	// Label selector for namespaces to search when discovering integration
	// resources. If nil, integration resources are only discovered in the
	// namespace of the GrafanaAgent resource.
	//
	// Set to `{}` to search all namespaces.
	namespaceSelector?: null | metav1.#LabelSelector @go(NamespaceSelector,*metav1.LabelSelector)
}

// Integration runs a single Grafana Agent integration. Integrations that
// generate telemetry must be configured to send that telemetry somewhere, such
// as autoscrape for exporter-based integrations.
//
// Integrations have access to the LogsInstances and MetricsInstances in the
// same GrafanaAgent resource set, referenced by the <namespace>/<name> of the
// Instance resource.
//
// For example, if there is a default/production MetricsInstance, you can
// configure a supported integration's autoscrape block with:
//
//	autoscrape:
//	  enable: true
//	  metrics_instance: default/production
//
// There is currently no way for telemetry created by an Operator-managed
// integration to be collected from outside of the integration itself.
#Integration: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Specifies the desired behavior of the Integration.
	spec?: #IntegrationSpec @go(Spec)
}

// IntegrationSpec specifies the desired behavior of a metrics
// integration.
#IntegrationSpec: {
	// Name of the integration to run (e.g., "node_exporter", "mysqld_exporter").
	name: string @go(Name)

	// Type informs Grafana Agent Operator about how to manage the integration being
	// configured.
	type: #IntegrationType @go(Type)

	// The configuration for the named integration. Note that Integrations are
	// deployed with the integrations-next feature flag, which has different
	// common settings:
	//
	//   https://grafana.com/docs/agent/latest/configuration/integrations/integrations-next/
	config: apiextv1.#JSON @go(Config)

	// An extra list of Volumes to be associated with the Grafana Agent pods
	// running this integration. Volume names are mutated to be unique across
	// all Integrations. Note that the specified volumes should be able to
	// tolerate existing on multiple pods at once when type is daemonset.
	//
	// Don't use volumes for loading Secrets or ConfigMaps from the same namespace
	// as the Integration; use the Secrets and ConfigMaps fields instead.
	volumes?: [...corev1.#Volume] @go(Volumes,[]corev1.Volume)

	// An extra list of VolumeMounts to be associated with the Grafana Agent pods
	// running this integration. VolumeMount names are mutated to be unique
	// across all used IntegrationSpecs.
	//
	// Mount paths should include the namespace/name of the Integration CR to
	// avoid potentially colliding with other resources.
	volumeMounts?: [...corev1.#VolumeMount] @go(VolumeMounts,[]corev1.VolumeMount)

	// An extra list of keys from Secrets in the same namespace as the
	// Integration which will be mounted into the Grafana Agent pod running this
	// Integration.
	//
	// Secrets will be mounted at
	// /etc/grafana-agent/integrations/secrets/<secret_namespace>/<secret_name>/<key>.
	secrets?: [...corev1.#SecretKeySelector] @go(Secrets,[]corev1.SecretKeySelector)

	// An extra list of keys from ConfigMaps in the same namespace as the
	// Integration which will be mounted into the Grafana Agent pod running this
	// Integration.
	//
	// ConfigMaps are mounted at
	// /etc/grafana-agent/integrations/configMaps/<configmap_namespace>/<configmap_name>/<key>.
	configMaps?: [...corev1.#ConfigMapKeySelector] @go(ConfigMaps,[]corev1.ConfigMapKeySelector)
}

// IntegrationType determines specific behaviors of a configured integration.
#IntegrationType: {
	// When true, the configured integration should be run on every Node in the
	// cluster. This is required for Integrations that generate Node-specific
	// metrics like node_exporter, otherwise it must be false to avoid generating
	// duplicate metrics.
	allNodes: bool @go(AllNodes)

	// Whether this integration can only be defined once for a Grafana Agent
	// process, such as statsd_exporter. It is invalid for a GrafanaAgent to
	// discover multiple unique Integrations with the same Integration name
	// (i.e., a single GrafanaAgent cannot deploy two statsd_exporters).
	unique: bool @go(Unique)
}

// IntegrationList is a list of Integration.
#IntegrationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)

	// Items is the list of Integration.
	items: [...null | #Integration] @go(Items,[]*Integration)
}
