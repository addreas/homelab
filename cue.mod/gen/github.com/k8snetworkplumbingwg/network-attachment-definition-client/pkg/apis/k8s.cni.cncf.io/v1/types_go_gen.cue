// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/k8snetworkplumbingwg/network-attachment-definition-client/pkg/apis/k8s.cni.cncf.io/v1

package v1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

#NetworkAttachmentDefinition: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta               @go(ObjectMeta)
	spec:      #NetworkAttachmentDefinitionSpec @go(Spec)
}

#NetworkAttachmentDefinitionSpec: {
	config: string @go(Config)
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#NetworkAttachmentDefinitionList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)
	items: [...#NetworkAttachmentDefinition] @go(Items,[]NetworkAttachmentDefinition)
}

// DNS contains values interesting for DNS resolvers
// +k8s:deepcopy-gen=false
#DNS: {
	nameservers?: [...string] @go(Nameservers,[]string)
	domain?: string @go(Domain)
	search?: [...string] @go(Search,[]string)
	options?: [...string] @go(Options,[]string)
}

// NetworkStatus is for network status annotation for pod
// +k8s:deepcopy-gen=false
#NetworkStatus: {
	name:       string @go(Name)
	interface?: string @go(Interface)
	ips?: [...string] @go(IPs,[]string)
	mac?:     string @go(Mac)
	default?: bool   @go(Default)
	dns?:     #DNS   @go(DNS)
}

// PortMapEntry for CNI PortMapEntry
// +k8s:deepcopy-gen=false
#PortMapEntry: {
	hostPort:      int    @go(HostPort)
	containerPort: int    @go(ContainerPort)
	protocol?:     string @go(Protocol)
	hostIP?:       string @go(HostIP)
}

// BandwidthEntry for CNI BandwidthEntry
// +k8s:deepcopy-gen=false
#BandwidthEntry: {
	ingressRate:  int @go(IngressRate)
	ingressBurst: int @go(IngressBurst)
	egressRate:   int @go(EgressRate)
	egressBurst:  int @go(EgressBurst)
}

// NetworkSelectionElement represents one element of the JSON format
// Network Attachment Selection Annotation as described in section 4.1.2
// of the CRD specification.
// +k8s:deepcopy-gen=false
#NetworkSelectionElement: {
	// Name contains the name of the Network object this element selects
	name: string @go(Name)

	// Namespace contains the optional namespace that the network referenced
	// by Name exists in
	namespace?: string @go(Namespace)

	// IPRequest contains an optional requested IP addresses for this network
	// attachment
	ips?: [...string] @go(IPRequest,[]string)

	// MacRequest contains an optional requested MAC address for this
	// network attachment
	mac?: string @go(MacRequest)

	// InfinibandGUIDRequest contains an optional requested Infiniband GUID
	// address for this network attachment
	"infiniband-guid"?: string @go(InfinibandGUIDRequest)

	// InterfaceRequest contains an optional requested name for the
	// network interface this attachment will create in the container
	interface?: string @go(InterfaceRequest)

	// PortMappingsRequest contains an optional requested port mapping
	// for the network
	portMappings?: [...null | #PortMapEntry] @go(PortMappingsRequest,[]*PortMapEntry)

	// BandwidthRequest contains an optional requested bandwidth for
	// the network
	bandwidth?: null | #BandwidthEntry @go(BandwidthRequest,*BandwidthEntry)

	// CNIArgs contains additional CNI arguments for the network interface
	"cni-args"?: null | {...} @go(CNIArgs,*map[string]interface{})

	// GatewayRequest contains default route IP address for the pod
	"default-route"?: [...string] @go(GatewayRequest,[]net.IP)
}

// Pod annotation for network-attachment-definition
#NetworkAttachmentAnnot: "k8s.v1.cni.cncf.io/networks"

// Pod annotation for network status
#NetworkStatusAnnot: "k8s.v1.cni.cncf.io/network-status"

// Old Pod annotation for network status (which is used before but it will be obsolated)
#OldNetworkStatusAnnot: "k8s.v1.cni.cncf.io/networks-status"

// NoK8sNetworkError indicates error, no network in kubernetes
// +k8s:deepcopy-gen=false
#NoK8sNetworkError: {
	Message: string
}
