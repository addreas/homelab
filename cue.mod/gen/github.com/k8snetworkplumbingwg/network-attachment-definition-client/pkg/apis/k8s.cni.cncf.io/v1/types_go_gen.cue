// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/k8snetworkplumbingwg/network-attachment-definition-client/pkg/apis/k8s.cni.cncf.io/v1

package v1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

#NetworkAttachmentDefinition: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta               @go(ObjectMeta)
	spec:      #NetworkAttachmentDefinitionSpec @go(Spec)
}

#NetworkAttachmentDefinitionSpec: {
	config: string @go(Config)
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#NetworkAttachmentDefinitionList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)
	items: [...#NetworkAttachmentDefinition] @go(Items,[]NetworkAttachmentDefinition)
}

// DNS contains values interesting for DNS resolvers
// +k8s:deepcopy-gen=false
#DNS: {
	nameservers?: [...string] @go(Nameservers,[]string)
	domain?: string @go(Domain)
	search?: [...string] @go(Search,[]string)
	options?: [...string] @go(Options,[]string)
}

#DeviceInfoTypePCI:       "pci"
#DeviceInfoTypeVHostUser: "vhost-user"
#DeviceInfoTypeMemif:     "memif"
#DeviceInfoTypeVDPA:      "vdpa"
#DeviceInfoVersion:       "1.1.0"

// DeviceInfo contains the information of the device associated
// with this network (if any)
#DeviceInfo: {
	type?:         string              @go(Type)
	version?:      string              @go(Version)
	pci?:          null | #PciDevice   @go(Pci,*PciDevice)
	vdpa?:         null | #VdpaDevice  @go(Vdpa,*VdpaDevice)
	"vhost-user"?: null | #VhostDevice @go(VhostUser,*VhostDevice)
	memif?:        null | #MemifDevice @go(Memif,*MemifDevice)
}

#PciDevice: {
	"pci-address"?:        string @go(PciAddress)
	"vhost-net"?:          string @go(Vhostnet)
	"rdma-device"?:        string @go(RdmaDevice)
	"pf-pci-address"?:     string @go(PfPciAddress)
	"representor-device"?: string @go(RepresentorDevice)
}

#VdpaDevice: {
	"parent-device"?:      string @go(ParentDevice)
	driver?:               string @go(Driver)
	path?:                 string @go(Path)
	"pci-address"?:        string @go(PciAddress)
	"pf-pci-address"?:     string @go(PfPciAddress)
	"representor-device"?: string @go(RepresentorDevice)
}

#VhostDeviceModeClient: "client"
#VhostDeviceModeServer: "server"

#VhostDevice: {
	mode?: string @go(Mode)
	path?: string @go(Path)
}

#MemifDeviceRoleMaster:   "master"
#MemitDeviceRoleSlave:    "slave"
#MemifDeviceModeEthernet: "ethernet"
#MemitDeviceModeIP:       "ip"
#MemitDeviceModePunt:     "punt"

#MemifDevice: {
	role?: string @go(Role)
	path?: string @go(Path)
	mode?: string @go(Mode)
}

// NetworkStatus is for network status annotation for pod
// +k8s:deepcopy-gen=false
#NetworkStatus: {
	name:       string @go(Name)
	interface?: string @go(Interface)
	ips?: [...string] @go(IPs,[]string)
	mac?:           string             @go(Mac)
	default?:       bool               @go(Default)
	dns?:           #DNS               @go(DNS)
	"device-info"?: null | #DeviceInfo @go(DeviceInfo,*DeviceInfo)
	gateway?: [...string] @go(Gateway,[]string)
}

// PortMapEntry for CNI PortMapEntry
// +k8s:deepcopy-gen=false
#PortMapEntry: {
	hostPort:      int    @go(HostPort)
	containerPort: int    @go(ContainerPort)
	protocol?:     string @go(Protocol)
	hostIP?:       string @go(HostIP)
}

// BandwidthEntry for CNI BandwidthEntry
// +k8s:deepcopy-gen=false
#BandwidthEntry: {
	ingressRate:  int @go(IngressRate)
	ingressBurst: int @go(IngressBurst)
	egressRate:   int @go(EgressRate)
	egressBurst:  int @go(EgressBurst)
}

// NetworkSelectionElement represents one element of the JSON format
// Network Attachment Selection Annotation as described in section 4.1.2
// of the CRD specification.
// +k8s:deepcopy-gen=false
#NetworkSelectionElement: _

// Pod annotation for network-attachment-definition
#NetworkAttachmentAnnot: "k8s.v1.cni.cncf.io/networks"

// Pod annotation for network status
#NetworkStatusAnnot: "k8s.v1.cni.cncf.io/network-status"

// NoK8sNetworkError indicates error, no network in kubernetes
// +k8s:deepcopy-gen=false
#NoK8sNetworkError: {
	Message: string
}
