// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go encoding/asn1

// Package asn1 implements parsing of DER-encoded ASN.1 data structures,
// as defined in ITU-T Rec X.690.
//
// See also “A Layman's Guide to a Subset of ASN.1, BER, and DER,”
// http://luca.ntop.org/Teaching/Appunti/asn1.html.
package asn1

import "reflect"

// A StructuralError suggests that the ASN.1 data is valid, but the Go type
// which is receiving it doesn't match.
#StructuralError: {
	Msg: string
}

// A SyntaxError suggests that the ASN.1 data is invalid.
#SyntaxError: {
	Msg: string
}

// BitString is the structure to use when you want an ASN.1 BIT STRING type. A
// bit string is padded up to the nearest byte in memory and the number of
// valid bits is recorded. Padding bits will be zero.
#BitString: {
	Bytes:     bytes @go(,[]byte)
	BitLength: int
}

// An ObjectIdentifier represents an ASN.1 OBJECT IDENTIFIER.
#ObjectIdentifier: [...int]

// An Enumerated is represented as a plain int.
#Enumerated: int

// A Flag accepts any data and is set to true if present.
#Flag: bool

_#asteriskFlag: bool

_#ampersandFlag: bool

_#allowAsterisk:   _#asteriskFlag & true
_#rejectAsterisk:  _#asteriskFlag & false
_#allowAmpersand:  _#ampersandFlag & true
_#rejectAmpersand: _#ampersandFlag & false

// A RawValue represents an undecoded ASN.1 object.
#RawValue: {
	Class:      int
	Tag:        int
	IsCompound: bool
	Bytes:      bytes @go(,[]byte)
	FullBytes:  bytes @go(,[]byte)
}

// RawContent is used to signal that the undecoded, DER data needs to be
// preserved for a struct. To use it, the first field of the struct must have
// this type. It's an error for any of the other fields to have this type.
#RawContent: bytes

// An invalidUnmarshalError describes an invalid argument passed to Unmarshal.
// (The argument to Unmarshal must be a non-nil pointer.)
_#invalidUnmarshalError: {
	Type: reflect.#Type
}
