// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go sigs.k8s.io/gateway-api/apis/v1alpha2

package v1alpha2

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// TCPRoute provides a way to route TCP requests. When combined with a Gateway
// listener, it can be used to forward connections on the port specified by the
// listener to a set of backends specified by the TCPRoute.
#TCPRoute: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec defines the desired state of TCPRoute.
	spec: #TCPRouteSpec @go(Spec)

	// Status defines the current state of TCPRoute.
	status?: #TCPRouteStatus @go(Status)
}

// TCPRouteSpec defines the desired state of TCPRoute
#TCPRouteSpec: {
	#CommonRouteSpec

	// Rules are a list of TCP matchers and actions.
	//
	// +kubebuilder:validation:MinItems=1
	// +kubebuilder:validation:MaxItems=16
	rules: [...#TCPRouteRule] @go(Rules,[]TCPRouteRule)
}

// TCPRouteStatus defines the observed state of TCPRoute
#TCPRouteStatus: {
	#RouteStatus
}

// TCPRouteRule is the configuration for a given rule.
#TCPRouteRule: {
	// BackendRefs defines the backend(s) where matching requests should be
	// sent. If unspecified or invalid (refers to a non-existent resource or a
	// Service with no endpoints), the underlying implementation MUST actively
	// reject connection attempts to this backend. Connection rejections must
	// respect weight; if an invalid backend is requested to have 80% of
	// connections, then 80% of connections must be rejected instead.
	//
	// Support: Core for Kubernetes Service
	// Support: Custom for any other resource
	//
	// Support for weight: Extended
	//
	// +kubebuilder:validation:MinItems=1
	// +kubebuilder:validation:MaxItems=16
	backendRefs?: [...#BackendRef] @go(BackendRefs,[]BackendRef)
}

// TCPRouteList contains a list of TCPRoute
#TCPRouteList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TCPRoute] @go(Items,[]TCPRoute)
}
