// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go io/fs

// Package fs defines basic interfaces to a file system.
// A file system can be provided by the host operating system
// but also by other packages.
package fs

// An FS provides access to a hierarchical file system.
//
// The FS interface is the minimum implementation required of the file system.
// A file system may implement additional interfaces,
// such as ReadFileFS, to provide additional or optimized functionality.
#FS: _

// A File provides access to a single file.
// The File interface is the minimum implementation required of the file.
// Directory files should also implement ReadDirFile.
// A file may implement io.ReaderAt or io.Seeker as optimizations.
#File: _

// A DirEntry is an entry read from a directory
// (using the ReadDir function or a ReadDirFile's ReadDir method).
#DirEntry: _

// A ReadDirFile is a directory file whose entries can be read with the ReadDir method.
// Every directory file should implement this interface.
// (It is permissible for any file to implement this interface,
// but if so ReadDir should return an error for non-directories.)
#ReadDirFile: _

// A FileInfo describes a file and is returned by Stat.
#FileInfo: _

// A FileMode represents a file's mode and permission bits.
// The bits have the same definition on all systems, so that
// information about files can be moved from one system
// to another portably. Not all bits apply to all systems.
// The only required bit is ModeDir for directories.
#FileMode: uint32 // #enumFileMode

#enumFileMode:
	#ModeDir |
	#ModeAppend |
	#ModeExclusive |
	#ModeTemporary |
	#ModeSymlink |
	#ModeDevice |
	#ModeNamedPipe |
	#ModeSocket |
	#ModeSetuid |
	#ModeSetgid |
	#ModeCharDevice |
	#ModeSticky |
	#ModeIrregular |
	#ModeType |
	#ModePerm

#values_FileMode: {
	ModeDir:        #ModeDir
	ModeAppend:     #ModeAppend
	ModeExclusive:  #ModeExclusive
	ModeTemporary:  #ModeTemporary
	ModeSymlink:    #ModeSymlink
	ModeDevice:     #ModeDevice
	ModeNamedPipe:  #ModeNamedPipe
	ModeSocket:     #ModeSocket
	ModeSetuid:     #ModeSetuid
	ModeSetgid:     #ModeSetgid
	ModeCharDevice: #ModeCharDevice
	ModeSticky:     #ModeSticky
	ModeIrregular:  #ModeIrregular
	ModeType:       #ModeType
	ModePerm:       #ModePerm
}

// The single letters are the abbreviations
// used by the String method's formatting.
#ModeDir:        #FileMode & 2147483648
#ModeAppend:     #FileMode & 1073741824
#ModeExclusive:  #FileMode & 536870912
#ModeTemporary:  #FileMode & 268435456
#ModeSymlink:    #FileMode & 134217728
#ModeDevice:     #FileMode & 67108864
#ModeNamedPipe:  #FileMode & 33554432
#ModeSocket:     #FileMode & 16777216
#ModeSetuid:     #FileMode & 8388608
#ModeSetgid:     #FileMode & 4194304
#ModeCharDevice: #FileMode & 2097152
#ModeSticky:     #FileMode & 1048576
#ModeIrregular:  #FileMode & 524288

// Mask for the type bits. For regular files, none will be set.
#ModeType: #FileMode & 2401763328
#ModePerm: #FileMode & 0o777

// PathError records an error and the operation and file path that caused it.
#PathError: {
	Op:   string
	Path: string
	Err:  _ @go(,error)
}
